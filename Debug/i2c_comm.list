
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005328  08005328  00015328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000070  08005440  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08005440  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000794b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001921  00000000  00000000  000279eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  00029310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  00029be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004e19  00000000  00000000  0002a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bc0  00000000  00000000  0002f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000791fd  00000000  00000000  00035da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aef9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002690  00000000  00000000  000af01c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800530c 	.word	0x0800530c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800530c 	.word	0x0800530c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2103      	movs	r1, #3
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	fab3 f383 	clz	r3, r3
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	401a      	ands	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	fb01 f303 	mul.w	r3, r1, r3
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b089      	sub	sp, #36	; 0x24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa93 f3a3 	rbit	r3, r3
 8000be4:	613b      	str	r3, [r7, #16]
  return(result);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fab3 f383 	clz	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2103      	movs	r1, #3
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c18:	bf00      	nop
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2103      	movs	r1, #3
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	401a      	ands	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa93 f3a3 	rbit	r3, r3
 8000c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	fab3 f383 	clz	r3, r3
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b089      	sub	sp, #36	; 0x24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	613b      	str	r3, [r7, #16]
  return(result);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	; 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	210f      	movs	r1, #15
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b088      	sub	sp, #32
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	613b      	str	r3, [r7, #16]
  return(result);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d5e:	e048      	b.n	8000df2 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d03a      	beq.n	8000dec <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fede 	bl	8000b40 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d003      	beq.n	8000d94 <LL_GPIO_Init+0x5e>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d106      	bne.n	8000da2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff14 	bl	8000bca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69b9      	ldr	r1, [r7, #24]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff3a 	bl	8000c24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d119      	bne.n	8000dec <LL_GPIO_Init+0xb6>
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d807      	bhi.n	8000dde <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff51 	bl	8000c7e <LL_GPIO_SetAFPin_0_7>
 8000ddc:	e006      	b.n	8000dec <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff76 	bl	8000cd8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1af      	bne.n	8000d60 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <LL_GPIO_Init+0xda>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d107      	bne.n	8000e20 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff febd 	bl	8000b9a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 0201 	bic.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0219      	lsls	r1, r3, #8
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff65 	bl	8000e4a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff6d 	bl	8000e6a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb6 	bl	8000f08 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff44 	bl	8000e2a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff70 	bl	8000e98 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff81 	bl	8000ec8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffa9 	bl	8000f24 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffb6 	bl	8000f4a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	615a      	str	r2, [r3, #20]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <LL_TIM_Init+0xd4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <LL_TIM_Init+0x2c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001126:	d003      	beq.n	8001130 <LL_TIM_Init+0x2c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <LL_TIM_Init+0xd8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d106      	bne.n	800113e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <LL_TIM_Init+0xd4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <LL_TIM_Init+0x6a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d00f      	beq.n	800116e <LL_TIM_Init+0x6a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a22      	ldr	r2, [pc, #136]	; (80011dc <LL_TIM_Init+0xd8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00b      	beq.n	800116e <LL_TIM_Init+0x6a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <LL_TIM_Init+0xdc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <LL_TIM_Init+0x6a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <LL_TIM_Init+0xe0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d003      	beq.n	800116e <LL_TIM_Init+0x6a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <LL_TIM_Init+0xe4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d106      	bne.n	800117c <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff3b 	bl	8001004 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff27 	bl	8000fe8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LL_TIM_Init+0xd4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00b      	beq.n	80011ba <LL_TIM_Init+0xb6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LL_TIM_Init+0xdc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <LL_TIM_Init+0xb6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LL_TIM_Init+0xe0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d003      	beq.n	80011ba <LL_TIM_Init+0xb6>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <LL_TIM_Init+0xe4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d105      	bne.n	80011c6 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	7c1b      	ldrb	r3, [r3, #16]
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff2d 	bl	8001020 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff8c 	bl	80010e4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40014000 	.word	0x40014000
 80011e4:	40014400 	.word	0x40014400
 80011e8:	40014800 	.word	0x40014800

080011ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001202:	d01f      	beq.n	8001244 <LL_TIM_OC_Init+0x58>
 8001204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001208:	d804      	bhi.n	8001214 <LL_TIM_OC_Init+0x28>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00c      	beq.n	8001228 <LL_TIM_OC_Init+0x3c>
 800120e:	2b10      	cmp	r3, #16
 8001210:	d011      	beq.n	8001236 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001212:	e033      	b.n	800127c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d022      	beq.n	8001260 <LL_TIM_OC_Init+0x74>
 800121a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800121e:	d026      	beq.n	800126e <LL_TIM_OC_Init+0x82>
 8001220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001224:	d015      	beq.n	8001252 <LL_TIM_OC_Init+0x66>
      break;
 8001226:	e029      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f82c 	bl	8001288 <OC1Config>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]
      break;
 8001234:	e022      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f8a5 	bl	8001388 <OC2Config>
 800123e:	4603      	mov	r3, r0
 8001240:	75fb      	strb	r3, [r7, #23]
      break;
 8001242:	e01b      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f922 	bl	8001490 <OC3Config>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
      break;
 8001250:	e014      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f99f 	bl	8001598 <OC4Config>
 800125a:	4603      	mov	r3, r0
 800125c:	75fb      	strb	r3, [r7, #23]
      break;
 800125e:	e00d      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 fa04 	bl	8001670 <OC5Config>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
      break;
 800126c:	e006      	b.n	800127c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 fa5f 	bl	8001734 <OC6Config>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
      break;
 800127a:	bf00      	nop
  }

  return result;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	f023 0201 	bic.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f023 0303 	bic.w	r3, r3, #3
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f023 0202 	bic.w	r2, r3, #2
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f023 0201 	bic.w	r2, r3, #1
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <OC1Config+0xf0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00b      	beq.n	8001312 <OC1Config+0x8a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <OC1Config+0xf4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <OC1Config+0x8a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <OC1Config+0xf8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d003      	beq.n	8001312 <OC1Config+0x8a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <OC1Config+0xfc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d11e      	bne.n	8001350 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f023 0208 	bic.w	r2, r3, #8
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4313      	orrs	r3, r2
 8001320:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f023 0204 	bic.w	r2, r3, #4
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4313      	orrs	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fe6a 	bl	800103c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40012c00 	.word	0x40012c00
 800137c:	40014000 	.word	0x40014000
 8001380:	40014400 	.word	0x40014400
 8001384:	40014800 	.word	0x40014800

08001388 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	f023 0210 	bic.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	0212      	lsls	r2, r2, #8
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0220 	bic.w	r2, r3, #32
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f023 0210 	bic.w	r2, r3, #16
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <OC2Config+0xf8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00b      	beq.n	8001418 <OC2Config+0x90>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a20      	ldr	r2, [pc, #128]	; (8001484 <OC2Config+0xfc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <OC2Config+0x90>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <OC2Config+0x100>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d003      	beq.n	8001418 <OC2Config+0x90>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <OC2Config+0x104>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d11f      	bne.n	8001458 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	019b      	lsls	r3, r3, #6
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fdf4 	bl	8001058 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40014000 	.word	0x40014000
 8001488:	40014400 	.word	0x40014400
 800148c:	40014800 	.word	0x40014800

08001490 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <OC3Config+0xf8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00b      	beq.n	800151e <OC3Config+0x8e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a20      	ldr	r2, [pc, #128]	; (800158c <OC3Config+0xfc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <OC3Config+0x8e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <OC3Config+0x100>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d003      	beq.n	800151e <OC3Config+0x8e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <OC3Config+0x104>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d11f      	bne.n	800155e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	015b      	lsls	r3, r3, #5
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fd7f 	bl	8001074 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40014000 	.word	0x40014000
 8001590:	40014400 	.word	0x40014400
 8001594:	40014800 	.word	0x40014800

08001598 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	0212      	lsls	r2, r2, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	031b      	lsls	r3, r3, #12
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	4313      	orrs	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <OC4Config+0xc8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00b      	beq.n	8001628 <OC4Config+0x90>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <OC4Config+0xcc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <OC4Config+0x90>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <OC4Config+0xd0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d003      	beq.n	8001628 <OC4Config+0x90>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <OC4Config+0xd4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d107      	bne.n	8001638 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fd20 	bl	8001090 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40014000 	.word	0x40014000
 8001668:	40014400 	.word	0x40014400
 800166c:	40014800 	.word	0x40014800

08001670 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <OC5Config+0xb4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00b      	beq.n	80016ec <OC5Config+0x7c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <OC5Config+0xb8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <OC5Config+0x7c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <OC5Config+0xbc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d003      	beq.n	80016ec <OC5Config+0x7c>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <OC5Config+0xc0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d109      	bne.n	8001700 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fccd 	bl	80010ac <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40014000 	.word	0x40014000
 800172c:	40014400 	.word	0x40014400
 8001730:	40014800 	.word	0x40014800

08001734 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	0212      	lsls	r2, r2, #8
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	4313      	orrs	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	051b      	lsls	r3, r3, #20
 800178e:	4313      	orrs	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <OC6Config+0xb4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00b      	beq.n	80017b2 <OC6Config+0x7e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <OC6Config+0xb8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <OC6Config+0x7e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <OC6Config+0xbc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d003      	beq.n	80017b2 <OC6Config+0x7e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <OC6Config+0xc0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d109      	bne.n	80017c6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fc78 	bl	80010c8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40014000 	.word	0x40014000
 80017f0:	40014400 	.word	0x40014400
 80017f4:	40014800 	.word	0x40014800

080017f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <LL_InitTick+0x30>)
 800180c:	3b01      	subs	r3, #1
 800180e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <LL_InitTick+0x30>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <LL_InitTick+0x30>)
 8001818:	2205      	movs	r2, #5
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e010 	.word	0xe000e010

0800182c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffdd 	bl	80017f8 <LL_InitTick>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <LL_mDelay+0x44>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001856:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185e:	d00c      	beq.n	800187a <LL_mDelay+0x32>
  {
    Delay++;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001866:	e008      	b.n	800187a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_mDelay+0x44>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <LL_mDelay+0x32>
    {
      Delay--;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
  while (Delay)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f3      	bne.n	8001868 <LL_mDelay+0x20>
    }
  }
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e010 	.word	0xe000e010

08001890 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <LL_SetSystemCoreClock+0x1c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	619a      	str	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_TIM_ClearFlag_UPDATE>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f06f 0201 	mvn.w	r2, #1
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001930:	2102      	movs	r1, #2
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f7ff ffbb 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800193a:	2101      	movs	r1, #1
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f7ff ffb6 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f7ff ffb0 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001950:	2120      	movs	r1, #32
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <resetSegments+0x58>)
 8001954:	f7ff ffac 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f7ff ffa6 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001964:	2108      	movs	r1, #8
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f7ff ffa1 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800196e:	2110      	movs	r1, #16
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <resetSegments+0x58>)
 8001972:	f7ff ff9d 	bl	80018b0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001976:	2102      	movs	r1, #2
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <resetSegments+0x58>)
 800197a:	f7ff ff99 	bl	80018b0 <LL_GPIO_SetOutputPin>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	48000400 	.word	0x48000400

08001988 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800198c:	2102      	movs	r1, #2
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f7ff ff9b 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001996:	2101      	movs	r1, #1
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f7ff ff96 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80019a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f7ff ff90 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80019ac:	2120      	movs	r1, #32
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <setSegments+0x58>)
 80019b0:	f7ff ff8c 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80019b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f7ff ff86 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80019c0:	2108      	movs	r1, #8
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f7ff ff81 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80019ca:	2110      	movs	r1, #16
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <setSegments+0x58>)
 80019ce:	f7ff ff7d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80019d2:	2102      	movs	r1, #2
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <setSegments+0x58>)
 80019d6:	f7ff ff79 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	48000400 	.word	0x48000400

080019e4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80019e8:	2101      	movs	r1, #1
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <resetDigits+0x3c>)
 80019ec:	f7ff ff6e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80019f0:	2110      	movs	r1, #16
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f7ff ff69 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80019fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f7ff ff63 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001a06:	2104      	movs	r1, #4
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f7ff ff5e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f7ff ff59 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	48000400 	.word	0x48000400

08001a24 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001a28:	2101      	movs	r1, #1
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <setDigits+0x3c>)
 8001a2c:	f7ff ff40 	bl	80018b0 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001a30:	2110      	movs	r1, #16
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a36:	f7ff ff3b 	bl	80018b0 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f7ff ff35 	bl	80018b0 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001a46:	2104      	movs	r1, #4
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f7ff ff30 	bl	80018b0 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f7ff ff2b 	bl	80018b0 <LL_GPIO_SetOutputPin>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400

08001a64 <setOne>:
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
}

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f7ff ff2d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f7ff ff27 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <setTwo>:

void setTwo(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f7ff ff1d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a92:	2102      	movs	r1, #2
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f7ff ff18 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <setTwo+0x38>)
 8001aa0:	f7ff ff14 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f7ff ff0e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4802      	ldr	r0, [pc, #8]	; (8001abc <setTwo+0x38>)
 8001ab4:	f7ff ff0a 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	48000400 	.word	0x48000400

08001ac0 <setThree>:

void setThree(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f7ff feff 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001ace:	2102      	movs	r1, #2
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f7ff fefa 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <setThree+0x38>)
 8001adc:	f7ff fef6 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f7ff fef0 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001aec:	2120      	movs	r1, #32
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <setThree+0x38>)
 8001af0:	f7ff feec 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400

08001afc <setFour>:

void setFour(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b00:	2108      	movs	r1, #8
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f7ff fee1 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f7ff fedc 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b14:	2110      	movs	r1, #16
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <setFour+0x30>)
 8001b18:	f7ff fed8 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f7ff fed2 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	48000400 	.word	0x48000400

08001b30 <setFive>:

void setFive(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b34:	2108      	movs	r1, #8
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f7ff fec7 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <setFive+0x38>)
 8001b42:	f7ff fec3 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b46:	2110      	movs	r1, #16
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <setFive+0x38>)
 8001b4a:	f7ff febf 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f7ff feb9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f7ff feb4 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	48000400 	.word	0x48000400

08001b6c <setSix>:

void setSix(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b70:	2108      	movs	r1, #8
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f7ff fea9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <setSix+0x44>)
 8001b7e:	f7ff fea5 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b82:	2110      	movs	r1, #16
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <setSix+0x44>)
 8001b86:	f7ff fea1 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b92:	f7ff fe9b 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b96:	2102      	movs	r1, #2
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f7ff fe96 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f7ff fe90 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	48000400 	.word	0x48000400

08001bb4 <setSeven>:

void setSeven(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f7ff fe85 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f7ff fe7f 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001bce:	2102      	movs	r1, #2
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f7ff fe7a 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <setEight>:

void setEight(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001be0:	2108      	movs	r1, #8
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f7ff fe71 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001bea:	2120      	movs	r1, #32
 8001bec:	480f      	ldr	r0, [pc, #60]	; (8001c2c <setEight+0x50>)
 8001bee:	f7ff fe6d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <setEight+0x50>)
 8001bf6:	f7ff fe69 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f7ff fe63 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c06:	2102      	movs	r1, #2
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f7ff fe5e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f7ff fe58 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f7ff fe53 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	48000400 	.word	0x48000400

08001c30 <setNine>:

void setNine(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001c34:	2101      	movs	r1, #1
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f7ff fe47 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f7ff fe41 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f7ff fe3c 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001c54:	2110      	movs	r1, #16
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <setNine+0x3c>)
 8001c58:	f7ff fe38 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f7ff fe33 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	48000400 	.word	0x48000400

08001c70 <setZero>:

void setZero(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c74:	2108      	movs	r1, #8
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f7ff fe27 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c7e:	2120      	movs	r1, #32
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <setZero+0x48>)
 8001c82:	f7ff fe23 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f7ff fe1d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c92:	2102      	movs	r1, #2
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f7ff fe18 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f7ff fe12 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f7ff fe0d 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	48000400 	.word	0x48000400

08001cbc <setA>:
void setA(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G,
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f7ff fe01 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f7ff fdfc 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f7ff fdf6 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	4808      	ldr	r0, [pc, #32]	; (8001d04 <setA+0x48>)
 8001ce4:	f7ff fdf2 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f7ff fdec 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfa:	f7ff fde7 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	48000400 	.word	0x48000400

08001d08 <setB>:
void setB(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
		//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d14:	f7ff fdda 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d18:	2120      	movs	r1, #32
 8001d1a:	480a      	ldr	r0, [pc, #40]	; (8001d44 <setB+0x3c>)
 8001d1c:	f7ff fdd6 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f7ff fdd0 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d2c:	2108      	movs	r1, #8
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f7ff fdcb 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001d36:	2110      	movs	r1, #16
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <setB+0x3c>)
 8001d3a:	f7ff fdc7 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	48000400 	.word	0x48000400

08001d48 <setC>:
void setC(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f7ff fdbb 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d56:	2120      	movs	r1, #32
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <setC+0x30>)
 8001d5a:	f7ff fdb7 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff fdb1 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d6a:	2108      	movs	r1, #8
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d70:	f7ff fdac 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	48000400 	.word	0x48000400

08001d7c <setD>:
void setD(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
		//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d80:	2101      	movs	r1, #1
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f7ff fda1 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f7ff fd9b 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d96:	2120      	movs	r1, #32
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <setD+0x3c>)
 8001d9a:	f7ff fd97 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da6:	f7ff fd91 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001daa:	2108      	movs	r1, #8
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db0:	f7ff fd8c 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	48000400 	.word	0x48000400

08001dbc <setE>:
void setE(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f7ff fd81 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <setE+0x38>)
 8001dce:	f7ff fd7d 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f7ff fd77 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001dde:	2108      	movs	r1, #8
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f7ff fd72 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001de8:	2110      	movs	r1, #16
 8001dea:	4802      	ldr	r0, [pc, #8]	; (8001df4 <setE+0x38>)
 8001dec:	f7ff fd6e 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	48000400 	.word	0x48000400

08001df8 <setF>:
void setF(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f7ff fd63 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f7ff fd5d 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e12:	2108      	movs	r1, #8
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f7ff fd58 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	4802      	ldr	r0, [pc, #8]	; (8001e28 <setF+0x30>)
 8001e20:	f7ff fd54 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	48000400 	.word	0x48000400

08001e2c <setG>:
void setG(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001e30:	2102      	movs	r1, #2
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f7ff fd49 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f7ff fd43 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001e46:	2120      	movs	r1, #32
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <setG+0x3c>)
 8001e4a:	f7ff fd3f 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f7ff fd39 	bl	80018cc <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f7ff fd34 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	48000400 	.word	0x48000400

08001e6c <setH>:
void setH(void){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001e70:	2101      	movs	r1, #1
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f7ff fd29 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f7ff fd23 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f7ff fd1d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e92:	2108      	movs	r1, #8
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f7ff fd18 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <setH+0x3c>)
 8001ea0:	f7ff fd14 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	48000400 	.word	0x48000400

08001eac <setI>:
void setI(void){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f7ff fd08 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec2:	f7ff fd03 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <setJ>:
void setJ(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f7ff fcf9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f7ff fcf3 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <setJ+0x34>)
 8001eea:	f7ff fcef 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef6:	f7ff fce9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	48000400 	.word	0x48000400

08001f04 <setK>:
void setK(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f08:	2102      	movs	r1, #2
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f7ff fcdd 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f7ff fcd7 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f7ff fcd1 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f30:	f7ff fccc 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f34:	2110      	movs	r1, #16
 8001f36:	4802      	ldr	r0, [pc, #8]	; (8001f40 <setK+0x3c>)
 8001f38:	f7ff fcc8 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	48000400 	.word	0x48000400

08001f44 <setL>:
void setL(void){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4808      	ldr	r0, [pc, #32]	; (8001f6c <setL+0x28>)
 8001f4c:	f7ff fcbe 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f7ff fcb8 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f7ff fcb3 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	48000400 	.word	0x48000400

08001f70 <setM>:
void setM(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	// A,B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f74:	2102      	movs	r1, #2
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff fca7 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f7ff fca2 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <setM+0x30>)
 8001f8c:	f7ff fc9e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f90:	2108      	movs	r1, #8
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f7ff fc99 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	48000400 	.word	0x48000400

08001fa4 <setN>:
void setN(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
		//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
		//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb0:	f7ff fc8c 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbc:	f7ff fc86 	bl	80018cc <LL_GPIO_ResetOutputPin>
		//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	4802      	ldr	r0, [pc, #8]	; (8001fcc <setN+0x28>)
 8001fc4:	f7ff fc82 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	48000400 	.word	0x48000400

08001fd0 <setO>:
void setO(void){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f7ff fc77 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe4:	f7ff fc72 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f7ff fc6c 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <setO+0x48>)
 8001ff8:	f7ff fc68 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f7ff fc62 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002008:	2108      	movs	r1, #8
 800200a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200e:	f7ff fc5d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
	}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	48000400 	.word	0x48000400

0800201c <setP>:
void setP(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002020:	2102      	movs	r1, #2
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f7ff fc51 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800202a:	2101      	movs	r1, #1
 800202c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002030:	f7ff fc4c 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f7ff fc46 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002040:	2108      	movs	r1, #8
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f7ff fc41 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800204a:	2110      	movs	r1, #16
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <setP+0x3c>)
 800204e:	f7ff fc3d 	bl	80018cc <LL_GPIO_ResetOutputPin>
	}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	48000400 	.word	0x48000400

0800205c <setR>:
void setR(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	// G,E
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002060:	2110      	movs	r1, #16
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <setR+0x1c>)
 8002064:	f7ff fc32 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f7ff fc2c 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	48000400 	.word	0x48000400

0800207c <setS>:
void setS(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002080:	2102      	movs	r1, #2
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f7ff fc21 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800208a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f7ff fc1b 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002096:	2120      	movs	r1, #32
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <setS+0x38>)
 800209a:	f7ff fc17 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800209e:	2108      	movs	r1, #8
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7ff fc12 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020a8:	2110      	movs	r1, #16
 80020aa:	4802      	ldr	r0, [pc, #8]	; (80020b4 <setS+0x38>)
 80020ac:	f7ff fc0e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	48000400 	.word	0x48000400

080020b8 <setT>:
void setT(void){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020bc:	2120      	movs	r1, #32
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <setT+0x30>)
 80020c0:	f7ff fc04 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80020c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f7ff fbfe 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020d0:	2108      	movs	r1, #8
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f7ff fbf9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020da:	2110      	movs	r1, #16
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <setT+0x30>)
 80020de:	f7ff fbf5 	bl	80018cc <LL_GPIO_ResetOutputPin>
	}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	48000400 	.word	0x48000400

080020ec <setU>:
void setU(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80020f0:	2101      	movs	r1, #1
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f7ff fbe9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f7ff fbe3 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002106:	2120      	movs	r1, #32
 8002108:	4807      	ldr	r0, [pc, #28]	; (8002128 <setU+0x3c>)
 800210a:	f7ff fbdf 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800210e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f7ff fbd9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800211a:	2108      	movs	r1, #8
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fbd4 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
	}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	48000400 	.word	0x48000400

0800212c <setV>:
void setV(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002130:	2101      	movs	r1, #1
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f7ff fbc9 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800213a:	2120      	movs	r1, #32
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <setV+0x24>)
 800213e:	f7ff fbc5 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002142:	2108      	movs	r1, #8
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f7ff fbc0 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
	}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	48000400 	.word	0x48000400

08002154 <setX>:
void setX(void){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002158:	2102      	movs	r1, #2
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215e:	f7ff fbb5 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002162:	2120      	movs	r1, #32
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <setX+0x24>)
 8002166:	f7ff fbb1 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800216a:	2110      	movs	r1, #16
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <setX+0x24>)
 800216e:	f7ff fbad 	bl	80018cc <LL_GPIO_ResetOutputPin>
	}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	48000400 	.word	0x48000400

0800217c <setY>:
void setY(void){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002180:	2101      	movs	r1, #1
 8002182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002186:	f7ff fba1 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800218a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002192:	f7ff fb9b 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002196:	2120      	movs	r1, #32
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <setY+0x38>)
 800219a:	f7ff fb97 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800219e:	2108      	movs	r1, #8
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f7ff fb92 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021a8:	2110      	movs	r1, #16
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <setY+0x38>)
 80021ac:	f7ff fb8e 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	48000400 	.word	0x48000400

080021b8 <setZ>:
void setZ(void){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021bc:	2102      	movs	r1, #2
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f7ff fb83 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021c6:	2101      	movs	r1, #1
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f7ff fb7e 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021d0:	2120      	movs	r1, #32
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <setZ+0x38>)
 80021d4:	f7ff fb7a 	bl	80018cc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e0:	f7ff fb74 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021e4:	2110      	movs	r1, #16
 80021e6:	4802      	ldr	r0, [pc, #8]	; (80021f0 <setZ+0x38>)
 80021e8:	f7ff fb70 	bl	80018cc <LL_GPIO_ResetOutputPin>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	48000400 	.word	0x48000400

080021f4 <podjebnik>:
void podjebnik(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021f8:	2120      	movs	r1, #32
 80021fa:	4802      	ldr	r0, [pc, #8]	; (8002204 <podjebnik+0x10>)
 80021fc:	f7ff fb66 	bl	80018cc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	48000400 	.word	0x48000400

08002208 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d823      	bhi.n	8002260 <setDigit+0x58>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <setDigit+0x18>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002231 	.word	0x08002231
 8002224:	0800223b 	.word	0x0800223b
 8002228:	08002247 	.word	0x08002247
 800222c:	08002255 	.word	0x08002255
	{
		case 0:
			DIGIT_1_ON;
 8002230:	2101      	movs	r1, #1
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <setDigit+0x60>)
 8002234:	f7ff fb3c 	bl	80018b0 <LL_GPIO_SetOutputPin>
			break;
 8002238:	e012      	b.n	8002260 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 800223a:	2110      	movs	r1, #16
 800223c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002240:	f7ff fb36 	bl	80018b0 <LL_GPIO_SetOutputPin>
			break;
 8002244:	e00c      	b.n	8002260 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 8002246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f7ff fb2f 	bl	80018b0 <LL_GPIO_SetOutputPin>
			break;
 8002252:	e005      	b.n	8002260 <setDigit+0x58>
		case 3:
			DIGIT_4_ON;
 8002254:	2104      	movs	r1, #4
 8002256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225a:	f7ff fb29 	bl	80018b0 <LL_GPIO_SetOutputPin>
			break;
 800225e:	bf00      	nop
	}
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	48000400 	.word	0x48000400

0800226c <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e165      	b.n	8002544 <updateDisplay+0x2d8>
	{
		switch(dDisplayData.digit[i])
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4ab6      	ldr	r2, [pc, #728]	; (8002554 <updateDisplay+0x2e8>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	3b30      	subs	r3, #48	; 0x30
 8002280:	2b2f      	cmp	r3, #47	; 0x2f
 8002282:	f200 8158 	bhi.w	8002536 <updateDisplay+0x2ca>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <updateDisplay+0x20>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	0800234d 	.word	0x0800234d
 8002290:	0800235b 	.word	0x0800235b
 8002294:	08002369 	.word	0x08002369
 8002298:	08002377 	.word	0x08002377
 800229c:	08002385 	.word	0x08002385
 80022a0:	08002393 	.word	0x08002393
 80022a4:	080023a1 	.word	0x080023a1
 80022a8:	080023af 	.word	0x080023af
 80022ac:	080023bd 	.word	0x080023bd
 80022b0:	080023cb 	.word	0x080023cb
 80022b4:	08002537 	.word	0x08002537
 80022b8:	08002537 	.word	0x08002537
 80022bc:	08002537 	.word	0x08002537
 80022c0:	08002537 	.word	0x08002537
 80022c4:	08002537 	.word	0x08002537
 80022c8:	08002537 	.word	0x08002537
 80022cc:	08002537 	.word	0x08002537
 80022d0:	080023d9 	.word	0x080023d9
 80022d4:	080023e7 	.word	0x080023e7
 80022d8:	080023f5 	.word	0x080023f5
 80022dc:	08002403 	.word	0x08002403
 80022e0:	08002411 	.word	0x08002411
 80022e4:	0800241f 	.word	0x0800241f
 80022e8:	0800242d 	.word	0x0800242d
 80022ec:	0800243b 	.word	0x0800243b
 80022f0:	08002449 	.word	0x08002449
 80022f4:	08002457 	.word	0x08002457
 80022f8:	08002465 	.word	0x08002465
 80022fc:	08002473 	.word	0x08002473
 8002300:	08002481 	.word	0x08002481
 8002304:	0800248f 	.word	0x0800248f
 8002308:	0800249d 	.word	0x0800249d
 800230c:	080024ab 	.word	0x080024ab
 8002310:	08002537 	.word	0x08002537
 8002314:	080024b9 	.word	0x080024b9
 8002318:	080024c7 	.word	0x080024c7
 800231c:	080024d5 	.word	0x080024d5
 8002320:	080024e3 	.word	0x080024e3
 8002324:	080024f1 	.word	0x080024f1
 8002328:	08002537 	.word	0x08002537
 800232c:	080024ff 	.word	0x080024ff
 8002330:	0800250d 	.word	0x0800250d
 8002334:	0800251b 	.word	0x0800251b
 8002338:	08002537 	.word	0x08002537
 800233c:	08002537 	.word	0x08002537
 8002340:	08002537 	.word	0x08002537
 8002344:	08002537 	.word	0x08002537
 8002348:	08002529 	.word	0x08002529
		{
			case '0':
			  setDigit(i);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff5a 	bl	8002208 <setDigit>
			  setZero();
 8002354:	f7ff fc8c 	bl	8001c70 <setZero>
			  break;
 8002358:	e0ed      	b.n	8002536 <updateDisplay+0x2ca>
			case '1':
			  setDigit(i);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff53 	bl	8002208 <setDigit>
			  setOne();
 8002362:	f7ff fb7f 	bl	8001a64 <setOne>
			  break;
 8002366:	e0e6      	b.n	8002536 <updateDisplay+0x2ca>
			case '2':
			  setDigit(i);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff4c 	bl	8002208 <setDigit>
			  setTwo();
 8002370:	f7ff fb88 	bl	8001a84 <setTwo>
			  break;
 8002374:	e0df      	b.n	8002536 <updateDisplay+0x2ca>
			case '3':
			  setDigit(i);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff45 	bl	8002208 <setDigit>
			  setThree();
 800237e:	f7ff fb9f 	bl	8001ac0 <setThree>
			  break;
 8002382:	e0d8      	b.n	8002536 <updateDisplay+0x2ca>
			case '4':
			  setDigit(i);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff3e 	bl	8002208 <setDigit>
			  setFour();
 800238c:	f7ff fbb6 	bl	8001afc <setFour>
			  break;
 8002390:	e0d1      	b.n	8002536 <updateDisplay+0x2ca>
			case '5':
			  setDigit(i);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff37 	bl	8002208 <setDigit>
			  setFive();
 800239a:	f7ff fbc9 	bl	8001b30 <setFive>
			  break;
 800239e:	e0ca      	b.n	8002536 <updateDisplay+0x2ca>
			case '6':
			  setDigit(i);
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff30 	bl	8002208 <setDigit>
			  setSix();
 80023a8:	f7ff fbe0 	bl	8001b6c <setSix>
			  break;
 80023ac:	e0c3      	b.n	8002536 <updateDisplay+0x2ca>
			case '7':
							setDigit(i);
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff29 	bl	8002208 <setDigit>
							setSeven();
 80023b6:	f7ff fbfd 	bl	8001bb4 <setSeven>
							break;
 80023ba:	e0bc      	b.n	8002536 <updateDisplay+0x2ca>
			case '8':
							setDigit(i);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff22 	bl	8002208 <setDigit>
							setEight();
 80023c4:	f7ff fc0a 	bl	8001bdc <setEight>
							break;
 80023c8:	e0b5      	b.n	8002536 <updateDisplay+0x2ca>
			case '9':
							setDigit(i);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff1b 	bl	8002208 <setDigit>
							setNine();
 80023d2:	f7ff fc2d 	bl	8001c30 <setNine>
							break;
 80023d6:	e0ae      	b.n	8002536 <updateDisplay+0x2ca>

			case 'A':
							setDigit(i);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff14 	bl	8002208 <setDigit>
							setA();
 80023e0:	f7ff fc6c 	bl	8001cbc <setA>
							break;
 80023e4:	e0a7      	b.n	8002536 <updateDisplay+0x2ca>
			case 'B':
							setDigit(i);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff0d 	bl	8002208 <setDigit>
							setB();
 80023ee:	f7ff fc8b 	bl	8001d08 <setB>
							break;
 80023f2:	e0a0      	b.n	8002536 <updateDisplay+0x2ca>
			case 'C':
							setDigit(i);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff06 	bl	8002208 <setDigit>
							setC();
 80023fc:	f7ff fca4 	bl	8001d48 <setC>
							break;
 8002400:	e099      	b.n	8002536 <updateDisplay+0x2ca>
			case 'D':
							setDigit(i);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff feff 	bl	8002208 <setDigit>
							setD();
 800240a:	f7ff fcb7 	bl	8001d7c <setD>
							break;
 800240e:	e092      	b.n	8002536 <updateDisplay+0x2ca>
			case 'E':
							setDigit(i);
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fef8 	bl	8002208 <setDigit>
							setE();
 8002418:	f7ff fcd0 	bl	8001dbc <setE>
							break;
 800241c:	e08b      	b.n	8002536 <updateDisplay+0x2ca>
			case 'F':
							setDigit(i);
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fef1 	bl	8002208 <setDigit>
							setF();
 8002426:	f7ff fce7 	bl	8001df8 <setF>
							break;
 800242a:	e084      	b.n	8002536 <updateDisplay+0x2ca>
			case 'G':
							setDigit(i);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff feea 	bl	8002208 <setDigit>
							setG();
 8002434:	f7ff fcfa 	bl	8001e2c <setG>
							break;
 8002438:	e07d      	b.n	8002536 <updateDisplay+0x2ca>
			case 'H':
							setDigit(i);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fee3 	bl	8002208 <setDigit>
							setH();
 8002442:	f7ff fd13 	bl	8001e6c <setH>
							break;
 8002446:	e076      	b.n	8002536 <updateDisplay+0x2ca>
			case 'I':
							setDigit(i);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fedc 	bl	8002208 <setDigit>
							setI();
 8002450:	f7ff fd2c 	bl	8001eac <setI>
							break;
 8002454:	e06f      	b.n	8002536 <updateDisplay+0x2ca>
			case 'J':
							setDigit(i);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fed5 	bl	8002208 <setDigit>
							setJ();
 800245e:	f7ff fd35 	bl	8001ecc <setJ>
							break;
 8002462:	e068      	b.n	8002536 <updateDisplay+0x2ca>
			case 'K':
							setDigit(i);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fece 	bl	8002208 <setDigit>
							setK();
 800246c:	f7ff fd4a 	bl	8001f04 <setK>
							break;
 8002470:	e061      	b.n	8002536 <updateDisplay+0x2ca>
			case 'L':
							setDigit(i);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fec7 	bl	8002208 <setDigit>
							setL();
 800247a:	f7ff fd63 	bl	8001f44 <setL>
							break;
 800247e:	e05a      	b.n	8002536 <updateDisplay+0x2ca>
			case 'M':
							setDigit(i);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fec0 	bl	8002208 <setDigit>
							setM();
 8002488:	f7ff fd72 	bl	8001f70 <setM>
							break;
 800248c:	e053      	b.n	8002536 <updateDisplay+0x2ca>
			case 'N':
							setDigit(i);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff feb9 	bl	8002208 <setDigit>
							setN();
 8002496:	f7ff fd85 	bl	8001fa4 <setN>
							break;
 800249a:	e04c      	b.n	8002536 <updateDisplay+0x2ca>
			case 'O':
							setDigit(i);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff feb2 	bl	8002208 <setDigit>
							setO();
 80024a4:	f7ff fd94 	bl	8001fd0 <setO>
							break;
 80024a8:	e045      	b.n	8002536 <updateDisplay+0x2ca>
			case 'P':
							setDigit(i);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff feab 	bl	8002208 <setDigit>
							setP();
 80024b2:	f7ff fdb3 	bl	800201c <setP>
							break;
 80024b6:	e03e      	b.n	8002536 <updateDisplay+0x2ca>
			case 'R':
							setDigit(i);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fea4 	bl	8002208 <setDigit>
							setR();
 80024c0:	f7ff fdcc 	bl	800205c <setR>
							break;
 80024c4:	e037      	b.n	8002536 <updateDisplay+0x2ca>
			case 'S':
							setDigit(i);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe9d 	bl	8002208 <setDigit>
							setS();
 80024ce:	f7ff fdd5 	bl	800207c <setS>
							break;
 80024d2:	e030      	b.n	8002536 <updateDisplay+0x2ca>
			case 'T':
							setDigit(i);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fe96 	bl	8002208 <setDigit>
							setT();
 80024dc:	f7ff fdec 	bl	80020b8 <setT>
							break;
 80024e0:	e029      	b.n	8002536 <updateDisplay+0x2ca>
			case 'U':
							setDigit(i);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fe8f 	bl	8002208 <setDigit>
							setU();
 80024ea:	f7ff fdff 	bl	80020ec <setU>
							break;
 80024ee:	e022      	b.n	8002536 <updateDisplay+0x2ca>
			case 'V':
							setDigit(i);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe88 	bl	8002208 <setDigit>
							setV();
 80024f8:	f7ff fe18 	bl	800212c <setV>
							break;
 80024fc:	e01b      	b.n	8002536 <updateDisplay+0x2ca>
			case 'X':
							setDigit(i);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe81 	bl	8002208 <setDigit>
							setX();
 8002506:	f7ff fe25 	bl	8002154 <setX>
							break;
 800250a:	e014      	b.n	8002536 <updateDisplay+0x2ca>
			case 'Y':
							setDigit(i);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fe7a 	bl	8002208 <setDigit>
							setY();
 8002514:	f7ff fe32 	bl	800217c <setY>
							break;
 8002518:	e00d      	b.n	8002536 <updateDisplay+0x2ca>
			case 'Z':
							setDigit(i);
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe73 	bl	8002208 <setDigit>
							setZ();
 8002522:	f7ff fe49 	bl	80021b8 <setZ>
							break;
 8002526:	e006      	b.n	8002536 <updateDisplay+0x2ca>

			case '_':
							setDigit(i);
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe6c 	bl	8002208 <setDigit>
							podjebnik();
 8002530:	f7ff fe60 	bl	80021f4 <podjebnik>
							break;
 8002534:	bf00      	nop

		}


		resetDigits();
 8002536:	f7ff fa55 	bl	80019e4 <resetDigits>
		resetSegments();
 800253a:	f7ff f9f7 	bl	800192c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	3301      	adds	r3, #1
 8002542:	71fb      	strb	r3, [r7, #7]
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b03      	cmp	r3, #3
 8002548:	f67f ae96 	bls.w	8002278 <updateDisplay+0xc>
	}
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000008c 	.word	0x2000008c

08002558 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <TIM3_IRQHandler+0x20>)
 800255e:	f7ff f9d1 	bl	8001904 <LL_TIM_IsActiveFlag_UPDATE>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002568:	f7ff fe80 	bl	800226c <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <TIM3_IRQHandler+0x20>)
 800256e:	f7ff f9bb 	bl	80018e8 <LL_TIM_ClearFlag_UPDATE>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40000400 	.word	0x40000400

0800257c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000

080025ac <LL_GPIO_ResetOutputPin>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	463b      	mov	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
 80025dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025e2:	f7ff ffcb 	bl	800257c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025ea:	f7ff ffc7 	bl	800257c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);					 // A
 80025ee:	f641 111b 	movw	r1, #6427	; 0x191b
 80025f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f6:	f7ff ffd9 	bl	80025ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0);																 // B
 80025fa:	2133      	movs	r1, #51	; 0x33
 80025fc:	4813      	ldr	r0, [pc, #76]	; (800264c <MX_GPIO_Init+0x84>)
 80025fe:	f7ff ffd5 	bl	80025ac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_12|LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_7; // A
 8002602:	f641 139f 	movw	r3, #6559	; 0x199f
 8002606:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002608:	2301      	movs	r3, #1
 800260a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002620:	f7fe fb89 	bl	8000d36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;																		 // B
 8002624:	2333      	movs	r3, #51	; 0x33
 8002626:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002628:	2301      	movs	r3, #1
 800262a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	463b      	mov	r3, r7
 800263a:	4619      	mov	r1, r3
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_GPIO_Init+0x84>)
 800263e:	f7fe fb7a 	bl	8000d36 <LL_GPIO_Init>

}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	48000400 	.word	0x48000400

08002650 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <NVIC_EnableIRQ+0x30>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da0b      	bge.n	80026cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <NVIC_SetPriority+0x4c>)
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	3b04      	subs	r3, #4
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ca:	e009      	b.n	80026e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <NVIC_SetPriority+0x50>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_I2C_Enable>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_I2C_EnableClockStretching>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_I2C_DisableGeneralCall>:
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_I2C_SetOwnAddress2>:
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027ce:	f023 0306 	bic.w	r3, r3, #6
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	60da      	str	r2, [r3, #12]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_I2C_DisableOwnAddress2>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60da      	str	r2, [r3, #12]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_I2C_EnableIT_RX>:
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f043 0204 	orr.w	r2, r3, #4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_I2C_DisableIT_RX>:
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0204 	bic.w	r2, r3, #4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_I2C_IsActiveFlag_TXIS>:
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_I2C_IsActiveFlag_STOP>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_I2C_ClearFlag_STOP>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	61da      	str	r2, [r3, #28]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_I2C_EnableAutoEndMode>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	0d5b      	lsrs	r3, r3, #21
 8002912:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <LL_I2C_HandleTransfer+0x48>)
 8002918:	430b      	orrs	r3, r1
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4319      	orrs	r1, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	4319      	orrs	r1, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4319      	orrs	r1, r3
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	03ff7bff 	.word	0x03ff7bff

08002948 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	b2db      	uxtb	r3, r3
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_AHB1_GRP1_EnableClock>:
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	4907      	ldr	r1, [pc, #28]	; (80029ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000

080029b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000

080029e0 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
 8002a08:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a0e:	f7ff ffb7 	bl	8002980 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a16:	2302      	movs	r3, #2
 8002a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002a26:	2304      	movs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4821      	ldr	r0, [pc, #132]	; (8002ab4 <MX_I2C1_Init+0xd4>)
 8002a30:	f7fe f981 	bl	8000d36 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002a34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a38:	f7ff ffba 	bl	80029b0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a3c:	f7ff fe08 	bl	8002650 <NVIC_GetPriorityGrouping>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe54 	bl	80026f4 <NVIC_EncodePriority>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	201f      	movs	r0, #31
 8002a52:	f7ff fe25 	bl	80026a0 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a56:	201f      	movs	r0, #31
 8002a58:	f7ff fe08 	bl	800266c <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002a5c:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002a5e:	f7ff ff3d 	bl	80028dc <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002a62:	4815      	ldr	r0, [pc, #84]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002a64:	f7ff fec1 	bl	80027ea <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002a68:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002a6a:	f7ff fe96 	bl	800279a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002a6e:	4812      	ldr	r0, [pc, #72]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002a70:	f7ff fe83 	bl	800277a <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_I2C1_Init+0xdc>)
 8002a7a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002a84:	2302      	movs	r3, #2
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	4808      	ldr	r0, [pc, #32]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002a98:	f7fe fa6a 	bl	8000f70 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002aa2:	f7ff fe8a 	bl	80027ba <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002aa6:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <MX_I2C1_Init+0xd8>)
 8002aa8:	f7ff fe57 	bl	800275a <LL_I2C_Enable>
}
 8002aac:	bf00      	nop
 8002aae:	3738      	adds	r7, #56	; 0x38
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	40005400 	.word	0x40005400
 8002abc:	2000090e 	.word	0x2000090e

08002ac0 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	71fb      	strb	r3, [r7, #7]
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71bb      	strb	r3, [r7, #6]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	717b      	strb	r3, [r7, #5]
 8002ada:	4613      	mov	r3, r2
 8002adc:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002ade:	793b      	ldrb	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002ae4:	79bb      	ldrb	r3, [r7, #6]
 8002ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aea:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002aec:	7979      	ldrb	r1, [r7, #5]
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <i2c_master_write+0x80>)
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2302      	movs	r3, #2
 8002afa:	2200      	movs	r2, #0
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <i2c_master_write+0x84>)
 8002afe:	f7ff fefd 	bl	80028fc <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	4619      	mov	r1, r3
 8002b06:	480f      	ldr	r0, [pc, #60]	; (8002b44 <i2c_master_write+0x84>)
 8002b08:	f7ff ff2b 	bl	8002962 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b0c:	e00a      	b.n	8002b24 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b0e:	480d      	ldr	r0, [pc, #52]	; (8002b44 <i2c_master_write+0x84>)
 8002b10:	f7ff fe9b 	bl	800284a <LL_I2C_IsActiveFlag_TXIS>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4809      	ldr	r0, [pc, #36]	; (8002b44 <i2c_master_write+0x84>)
 8002b20:	f7ff ff1f 	bl	8002962 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b24:	4807      	ldr	r0, [pc, #28]	; (8002b44 <i2c_master_write+0x84>)
 8002b26:	f7ff feb6 	bl	8002896 <LL_I2C_IsActiveFlag_STOP>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <i2c_master_write+0x84>)
 8002b32:	f7ff fec3 	bl	80028bc <LL_I2C_ClearFlag_STOP>
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	80002000 	.word	0x80002000
 8002b44:	40005400 	.word	0x40005400

08002b48 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	70fb      	strb	r3, [r7, #3]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70bb      	strb	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <i2c_master_read+0xe0>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002b68:	7c3b      	ldrb	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002b6e:	78bb      	ldrb	r3, [r7, #2]
 8002b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b74:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <i2c_master_read+0xe4>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002b7c:	482c      	ldr	r0, [pc, #176]	; (8002c30 <i2c_master_read+0xe8>)
 8002b7e:	f7ff fe44 	bl	800280a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b82:	7879      	ldrb	r1, [r7, #1]
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <i2c_master_read+0xec>)
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2200      	movs	r2, #0
 8002b92:	4827      	ldr	r0, [pc, #156]	; (8002c30 <i2c_master_read+0xe8>)
 8002b94:	f7ff feb2 	bl	80028fc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b98:	e00a      	b.n	8002bb0 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b9a:	4825      	ldr	r0, [pc, #148]	; (8002c30 <i2c_master_read+0xe8>)
 8002b9c:	f7ff fe55 	bl	800284a <LL_I2C_IsActiveFlag_TXIS>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4821      	ldr	r0, [pc, #132]	; (8002c30 <i2c_master_read+0xe8>)
 8002bac:	f7ff fed9 	bl	8002962 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002bb0:	481f      	ldr	r0, [pc, #124]	; (8002c30 <i2c_master_read+0xe8>)
 8002bb2:	f7ff fe70 	bl	8002896 <LL_I2C_IsActiveFlag_STOP>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002bbc:	481c      	ldr	r0, [pc, #112]	; (8002c30 <i2c_master_read+0xe8>)
 8002bbe:	f7ff fe7d 	bl	80028bc <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002bc2:	bf00      	nop
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <i2c_master_read+0xe8>)
 8002bc6:	f7ff fe66 	bl	8002896 <LL_I2C_IsActiveFlag_STOP>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002bd0:	7879      	ldrb	r1, [r7, #1]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <i2c_master_read+0xf0>)
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	2200      	movs	r2, #0
 8002be2:	4813      	ldr	r0, [pc, #76]	; (8002c30 <i2c_master_read+0xe8>)
 8002be4:	f7ff fe8a 	bl	80028fc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002be8:	bf00      	nop
 8002bea:	4811      	ldr	r0, [pc, #68]	; (8002c30 <i2c_master_read+0xe8>)
 8002bec:	f7ff fe53 	bl	8002896 <LL_I2C_IsActiveFlag_STOP>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f9      	beq.n	8002bea <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002bf6:	480e      	ldr	r0, [pc, #56]	; (8002c30 <i2c_master_read+0xe8>)
 8002bf8:	f7ff fe60 	bl	80028bc <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <i2c_master_read+0xe8>)
 8002bfe:	f7ff fe14 	bl	800282a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <i2c_master_read+0xe8>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <i2c_master_read+0xe8>)
 8002c08:	f043 0310 	orr.w	r3, r3, #16
 8002c0c:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <i2c_master_read+0xf4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <i2c_master_read+0xe4>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <i2c_master_read+0xe0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200000a4 	.word	0x200000a4
 8002c2c:	20000093 	.word	0x20000093
 8002c30:	40005400 	.word	0x40005400
 8002c34:	80002000 	.word	0x80002000
 8002c38:	80002400 	.word	0x80002400
 8002c3c:	20000094 	.word	0x20000094

08002c40 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8002c40:	b598      	push	{r3, r4, r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002c44:	4812      	ldr	r0, [pc, #72]	; (8002c90 <I2C1_EV_IRQHandler+0x50>)
 8002c46:	f7ff fe13 	bl	8002870 <LL_I2C_IsActiveFlag_RXNE>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <I2C1_EV_IRQHandler+0x54>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <I2C1_EV_IRQHandler+0x58>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	b2c8      	uxtb	r0, r1
 8002c5e:	490e      	ldr	r1, [pc, #56]	; (8002c98 <I2C1_EV_IRQHandler+0x58>)
 8002c60:	7008      	strb	r0, [r1, #0]
 8002c62:	18d4      	adds	r4, r2, r3
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <I2C1_EV_IRQHandler+0x50>)
 8002c66:	f7ff fe6f 	bl	8002948 <LL_I2C_ReceiveData8>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <I2C1_EV_IRQHandler+0x58>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b13      	cmp	r3, #19
 8002c76:	d903      	bls.n	8002c80 <I2C1_EV_IRQHandler+0x40>
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <I2C1_EV_IRQHandler+0x58>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e001      	b.n	8002c84 <I2C1_EV_IRQHandler+0x44>
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <I2C1_EV_IRQHandler+0x58>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <I2C1_EV_IRQHandler+0x5c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
	}
}
 8002c8a:	bf00      	nop
 8002c8c:	bd98      	pop	{r3, r4, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40005400 	.word	0x40005400
 8002c94:	200000a4 	.word	0x200000a4
 8002c98:	20000094 	.word	0x20000094
 8002c9c:	20000093 	.word	0x20000093

08002ca0 <NVIC_SetPriorityGrouping>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <LL_RCC_HSI_Enable+0x1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <LL_RCC_HSI_Enable+0x1c>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <LL_RCC_HSI_IsReady+0x20>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40021000 	.word	0x40021000

08002d2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4904      	ldr	r1, [pc, #16]	; (8002d54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <LL_RCC_SetSysClkSource+0x24>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 0203 	bic.w	r2, r3, #3
 8002d68:	4904      	ldr	r1, [pc, #16]	; (8002d7c <LL_RCC_SetSysClkSource+0x24>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40021000 	.word	0x40021000

08002d80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <LL_RCC_GetSysClkSource+0x18>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 030c 	and.w	r3, r3, #12
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	4904      	ldr	r1, [pc, #16]	; (8002de8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40021000 	.word	0x40021000

08002dec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfc:	4904      	ldr	r1, [pc, #16]	; (8002e10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40021000 	.word	0x40021000

08002e14 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0e1b      	lsrs	r3, r3, #24
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000

08002e44 <LL_APB1_GRP1_EnableClock>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40021000 	.word	0x40021000

08002e74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <LL_FLASH_SetLatency+0x24>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 0207 	bic.w	r2, r3, #7
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <LL_FLASH_SetLatency+0x24>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40022000 	.word	0x40022000

08002ecc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <LL_FLASH_GetLatency+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d106      	bne.n	8002f04 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LL_SYSTICK_SetClkSource+0x34>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <LL_SYSTICK_SetClkSource+0x34>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002f02:	e005      	b.n	8002f10 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <LL_SYSTICK_SetClkSource+0x34>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <LL_SYSTICK_SetClkSource+0x34>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <main>:




int main(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7ff ffa5 	bl	8002e74 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002f2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002f2e:	f7ff ff89 	bl	8002e44 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f32:	2003      	movs	r0, #3
 8002f34:	f7ff feb4 	bl	8002ca0 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8002f38:	f000 f8d0 	bl	80030dc <SystemClock_Config>

  MX_GPIO_Init();
 8002f3c:	f7ff fb44 	bl	80025c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f40:	f7ff fd4e 	bl	80029e0 <MX_I2C1_Init>

  setSegments();
 8002f44:	f7fe fd20 	bl	8001988 <setSegments>
  setDigits();
 8002f48:	f7fe fd6c 	bl	8001a24 <setDigits>

  LL_mDelay(2000);
 8002f4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f50:	f7fe fc7a 	bl	8001848 <LL_mDelay>

  resetDigits();
 8002f54:	f7fe fd46 	bl	80019e4 <resetDigits>
  resetSegments();
 8002f58:	f7fe fce8 	bl	800192c <resetSegments>

  MX_TIM3_Init();
 8002f5c:	f000 facc 	bl	80034f8 <MX_TIM3_Init>

  lsm6ds0_init();
 8002f60:	f000 fb86 	bl	8003670 <lsm6ds0_init>
  hts221_init();
 8002f64:	f000 fe1a 	bl	8003b9c <hts221_init>
  lps25hb_init();
 8002f68:	f000 fe9a 	bl	8003ca0 <lps25hb_init>
  lis3mdl_init();
 8002f6c:	f000 fca6 	bl	80038bc <lis3mdl_init>

  while (1)
  {
	  teplota = hts221_getTemp();
 8002f70:	f000 fd2e 	bl	80039d0 <hts221_getTemp>
 8002f74:	eef0 7a40 	vmov.f32	s15, s0
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <main+0xd0>)
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
	  vlhkost = hts221_getHumi();
 8002f7e:	f000 fdb6 	bl	8003aee <hts221_getHumi>
 8002f82:	4603      	mov	r3, r0
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <main+0xd4>)
 8002f88:	701a      	strb	r2, [r3, #0]
	  tlak = lps25hb_getPressure();
 8002f8a:	f000 fe5d 	bl	8003c48 <lps25hb_getPressure>
 8002f8e:	eef0 7a40 	vmov.f32	s15, s0
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <main+0xd8>)
 8002f94:	edc3 7a00 	vstr	s15, [r3]
	  // void lis3mdl_get_mag(float* x, float* y, float* z)
	  lis3mdl_get_mag(&mag[0],&mag[1],&mag[2]);
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <main+0xdc>)
 8002f9a:	4919      	ldr	r1, [pc, #100]	; (8003000 <main+0xe0>)
 8002f9c:	4819      	ldr	r0, [pc, #100]	; (8003004 <main+0xe4>)
 8002f9e:	f000 fbe1 	bl	8003764 <lis3mdl_get_mag>
	  azi=lis3mdl_get_azimut(mag[0],mag[1]);
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <main+0xe4>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <main+0xe4>)
 8002faa:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fae:	eef0 0a47 	vmov.f32	s1, s14
 8002fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb6:	f000 fc37 	bl	8003828 <lis3mdl_get_azimut>
 8002fba:	eef0 7a40 	vmov.f32	s15, s0
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <main+0xe8>)
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
	  nadmorska = nadmorska_vyska(tlak,teplota);
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <main+0xd8>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <main+0xd0>)
 8002fcc:	ed93 7a00 	vldr	s14, [r3]
 8002fd0:	eef0 0a47 	vmov.f32	s1, s14
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	f000 f81a 	bl	8003010 <nadmorska_vyska>
 8002fdc:	eef0 7a40 	vmov.f32	s15, s0
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <main+0xec>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8002fe6:	2032      	movs	r0, #50	; 0x32
 8002fe8:	f7fe fc2e 	bl	8001848 <LL_mDelay>
	  teplota = hts221_getTemp();
 8002fec:	e7c0      	b.n	8002f70 <main+0x50>
 8002fee:	bf00      	nop
 8002ff0:	2000009c 	.word	0x2000009c
 8002ff4:	200000a0 	.word	0x200000a0
 8002ff8:	20000098 	.word	0x20000098
 8002ffc:	200000c8 	.word	0x200000c8
 8003000:	200000c4 	.word	0x200000c4
 8003004:	200000c0 	.word	0x200000c0
 8003008:	200000b8 	.word	0x200000b8
 800300c:	200000b4 	.word	0x200000b4

08003010 <nadmorska_vyska>:
  }
}
float nadmorska_vyska(float tlak,float teplota)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
 800301a:	edc7 0a00 	vstr	s1, [r7]
	//https://keisan.casio.com/exec/system/1224585971
	float z2;
	const float pom = 1/5.257;
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <nadmorska_vyska+0xc0>)
 8003020:	61fb      	str	r3, [r7, #28]
	const float TK = 273.15;
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <nadmorska_vyska+0xc4>)
 8003024:	61bb      	str	r3, [r7, #24]
	const float p0 = 101325 / 100.0f;
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <nadmorska_vyska+0xc8>)
 8003028:	617b      	str	r3, [r7, #20]
	float akt_t = teplota + TK;
 800302a:	ed97 7a00 	vldr	s14, [r7]
 800302e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003036:	edc7 7a04 	vstr	s15, [r7, #16]
	float mocnina = pow(p0/tlak,pom);
 800303a:	ed97 7a05 	vldr	s14, [r7, #20]
 800303e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003042:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003046:	ee16 0a90 	vmov	r0, s13
 800304a:	f7fd fa21 	bl	8000490 <__aeabi_f2d>
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	69f8      	ldr	r0, [r7, #28]
 8003054:	f7fd fa1c 	bl	8000490 <__aeabi_f2d>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	ec43 2b11 	vmov	d1, r2, r3
 8003060:	ec45 4b10 	vmov	d0, r4, r5
 8003064:	f000 fe7a 	bl	8003d5c <pow>
 8003068:	ec54 3b10 	vmov	r3, r4, d0
 800306c:	4618      	mov	r0, r3
 800306e:	4621      	mov	r1, r4
 8003070:	f7fd fd16 	bl	8000aa0 <__aeabi_d2f>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]

	z2 = ((mocnina-1)*(TK + 15)) / 0.0065;
 8003078:	edd7 7a03 	vldr	s15, [r7, #12]
 800307c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003080:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003084:	edd7 7a06 	vldr	s15, [r7, #24]
 8003088:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800308c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003094:	ee17 0a90 	vmov	r0, s15
 8003098:	f7fd f9fa 	bl	8000490 <__aeabi_f2d>
 800309c:	a30a      	add	r3, pc, #40	; (adr r3, 80030c8 <nadmorska_vyska+0xb8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fb77 	bl	8000794 <__aeabi_ddiv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4618      	mov	r0, r3
 80030ac:	4621      	mov	r1, r4
 80030ae:	f7fd fcf7 	bl	8000aa0 <__aeabi_d2f>
 80030b2:	4603      	mov	r3, r0
 80030b4:	60bb      	str	r3, [r7, #8]

	return z2;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	ee07 3a90 	vmov	s15, r3
}
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bdb0      	pop	{r4, r5, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	76c8b439 	.word	0x76c8b439
 80030cc:	3f7a9fbe 	.word	0x3f7a9fbe
 80030d0:	3e42c9b4 	.word	0x3e42c9b4
 80030d4:	43889333 	.word	0x43889333
 80030d8:	447d5000 	.word	0x447d5000

080030dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff fedf 	bl	8002ea4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80030e6:	f7ff fef1 	bl	8002ecc <LL_FLASH_GetLatency>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80030f0:	f000 f82e 	bl	8003150 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80030f4:	f7ff fdf8 	bl	8002ce8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80030f8:	bf00      	nop
 80030fa:	f7ff fe05 	bl	8002d08 <LL_RCC_HSI_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d1fa      	bne.n	80030fa <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003104:	2010      	movs	r0, #16
 8003106:	f7ff fe11 	bl	8002d2c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800310a:	2000      	movs	r0, #0
 800310c:	f7ff fe46 	bl	8002d9c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003110:	2000      	movs	r0, #0
 8003112:	f7ff fe57 	bl	8002dc4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff fe68 	bl	8002dec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff fe1b 	bl	8002d58 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003122:	bf00      	nop
 8003124:	f7ff fe2c 	bl	8002d80 <LL_RCC_GetSysClkSource>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1fa      	bne.n	8003124 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 800312e:	4807      	ldr	r0, [pc, #28]	; (800314c <SystemClock_Config+0x70>)
 8003130:	f7fe fb7c 	bl	800182c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003134:	2004      	movs	r0, #4
 8003136:	f7ff fed7 	bl	8002ee8 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800313a:	4804      	ldr	r0, [pc, #16]	; (800314c <SystemClock_Config+0x70>)
 800313c:	f7fe fba8 	bl	8001890 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003140:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003144:	f7ff fe66 	bl	8002e14 <LL_RCC_SetI2CClockSource>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	007a1200 	.word	0x007a1200

08003150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <HardFault_Handler+0x4>

08003172 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <MemManage_Handler+0x4>

08003178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <BusFault_Handler+0x4>

0800317e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003182:	e7fe      	b.n	8003182 <UsageFault_Handler+0x4>

08003184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c0:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <SystemInit+0x84>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <SystemInit+0x84>)
 80031c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <SystemInit+0x88>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <SystemInit+0x88>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <SystemInit+0x88>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4918      	ldr	r1, [pc, #96]	; (8003244 <SystemInit+0x88>)
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <SystemInit+0x8c>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <SystemInit+0x88>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <SystemInit+0x88>)
 80031ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <SystemInit+0x88>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <SystemInit+0x88>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <SystemInit+0x88>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <SystemInit+0x88>)
 800320a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800320e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <SystemInit+0x88>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <SystemInit+0x88>)
 8003216:	f023 030f 	bic.w	r3, r3, #15
 800321a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <SystemInit+0x88>)
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	4908      	ldr	r1, [pc, #32]	; (8003244 <SystemInit+0x88>)
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <SystemInit+0x90>)
 8003224:	4013      	ands	r3, r2
 8003226:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x88>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SystemInit+0x84>)
 8003230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003234:	609a      	str	r2, [r3, #8]
#endif
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00
 8003244:	40021000 	.word	0x40021000
 8003248:	f87fc00c 	.word	0xf87fc00c
 800324c:	ff00fccc 	.word	0xff00fccc

08003250 <NVIC_GetPriorityGrouping>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EnableIRQ>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4907      	ldr	r1, [pc, #28]	; (800329c <NVIC_EnableIRQ+0x30>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2001      	movs	r0, #1
 8003286:	fa00 f202 	lsl.w	r2, r0, r2
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100

080032a0 <NVIC_SetPriority>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da0b      	bge.n	80032cc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	; (80032ec <NVIC_SetPriority+0x4c>)
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	3b04      	subs	r3, #4
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	761a      	strb	r2, [r3, #24]
}
 80032ca:	e009      	b.n	80032e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	4907      	ldr	r1, [pc, #28]	; (80032f0 <NVIC_SetPriority+0x50>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <NVIC_EncodePriority>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <LL_APB1_GRP1_EnableClock>:
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <LL_APB1_GRP1_EnableClock+0x2c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000

0800338c <LL_TIM_EnableCounter>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_TIM_EnableARRPreload>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_TIM_OC_DisableFast>:
{
 80033cc:	b4b0      	push	{r4, r5, r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d028      	beq.n	800342e <LL_TIM_OC_DisableFast+0x62>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d023      	beq.n	800342a <LL_TIM_OC_DisableFast+0x5e>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d01e      	beq.n	8003426 <LL_TIM_OC_DisableFast+0x5a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d019      	beq.n	8003422 <LL_TIM_OC_DisableFast+0x56>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d013      	beq.n	800341e <LL_TIM_OC_DisableFast+0x52>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d00d      	beq.n	800341a <LL_TIM_OC_DisableFast+0x4e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d007      	beq.n	8003416 <LL_TIM_OC_DisableFast+0x4a>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d101      	bne.n	8003412 <LL_TIM_OC_DisableFast+0x46>
 800340e:	2307      	movs	r3, #7
 8003410:	e00e      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 8003412:	2308      	movs	r3, #8
 8003414:	e00c      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 8003416:	2306      	movs	r3, #6
 8003418:	e00a      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 800341a:	2305      	movs	r3, #5
 800341c:	e008      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 800341e:	2304      	movs	r3, #4
 8003420:	e006      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 8003422:	2303      	movs	r3, #3
 8003424:	e004      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_TIM_OC_DisableFast+0x64>
 800342e:	2300      	movs	r3, #0
 8003430:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3318      	adds	r3, #24
 8003436:	461a      	mov	r2, r3
 8003438:	4629      	mov	r1, r5
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <LL_TIM_OC_DisableFast+0x94>)
 800343c:	5c5b      	ldrb	r3, [r3, r1]
 800343e:	4413      	add	r3, r2
 8003440:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	4629      	mov	r1, r5
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <LL_TIM_OC_DisableFast+0x98>)
 8003448:	5c5b      	ldrb	r3, [r3, r1]
 800344a:	4619      	mov	r1, r3
 800344c:	2304      	movs	r3, #4
 800344e:	408b      	lsls	r3, r1
 8003450:	43db      	mvns	r3, r3
 8003452:	4013      	ands	r3, r2
 8003454:	6023      	str	r3, [r4, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bcb0      	pop	{r4, r5, r7}
 800345e:	4770      	bx	lr
 8003460:	08005328 	.word	0x08005328
 8003464:	08005334 	.word	0x08005334

08003468 <LL_TIM_SetClockSource>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800347a:	f023 0307 	bic.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_TIM_SetTriggerOutput>:
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	605a      	str	r2, [r3, #4]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_TIM_DisableMasterSlaveMode>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_TIM_EnableIT_UPDATE>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	; 0x38
 80034fc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80034fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2220      	movs	r2, #32
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fc17 	bl	8003d48 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800351a:	2002      	movs	r0, #2
 800351c:	f7ff ff1e 	bl	800335c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8003520:	f7ff fe96 	bl	8003250 <NVIC_GetPriorityGrouping>
 8003524:	4603      	mov	r3, r0
 8003526:	2202      	movs	r2, #2
 8003528:	2102      	movs	r1, #2
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fee2 	bl	80032f4 <NVIC_EncodePriority>
 8003530:	4603      	mov	r3, r0
 8003532:	4619      	mov	r1, r3
 8003534:	201d      	movs	r0, #29
 8003536:	f7ff feb3 	bl	80032a0 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800353a:	201d      	movs	r0, #29
 800353c:	f7ff fe96 	bl	800326c <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8003540:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8003544:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800354a:	2313      	movs	r3, #19
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800354e:	2300      	movs	r3, #0
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	4817      	ldr	r0, [pc, #92]	; (80035b8 <MX_TIM3_Init+0xc0>)
 800355a:	f7fd fdd3 	bl	8001104 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 800355e:	4816      	ldr	r0, [pc, #88]	; (80035b8 <MX_TIM3_Init+0xc0>)
 8003560:	f7ff ff24 	bl	80033ac <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003564:	2100      	movs	r1, #0
 8003566:	4814      	ldr	r0, [pc, #80]	; (80035b8 <MX_TIM3_Init+0xc0>)
 8003568:	f7ff ff7e 	bl	8003468 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800356c:	2310      	movs	r3, #16
 800356e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	461a      	mov	r2, r3
 8003584:	2101      	movs	r1, #1
 8003586:	480c      	ldr	r0, [pc, #48]	; (80035b8 <MX_TIM3_Init+0xc0>)
 8003588:	f7fd fe30 	bl	80011ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800358c:	2101      	movs	r1, #1
 800358e:	480a      	ldr	r0, [pc, #40]	; (80035b8 <MX_TIM3_Init+0xc0>)
 8003590:	f7ff ff1c 	bl	80033cc <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003594:	2100      	movs	r1, #0
 8003596:	4808      	ldr	r0, [pc, #32]	; (80035b8 <MX_TIM3_Init+0xc0>)
 8003598:	f7ff ff7b 	bl	8003492 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800359c:	4806      	ldr	r0, [pc, #24]	; (80035b8 <MX_TIM3_Init+0xc0>)
 800359e:	f7ff ff8b 	bl	80034b8 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_TIM3_Init+0xc0>)
 80035a4:	f7ff ff98 	bl	80034d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80035a8:	4803      	ldr	r0, [pc, #12]	; (80035b8 <MX_TIM3_Init+0xc0>)
 80035aa:	f7ff feef 	bl	800338c <LL_TIM_EnableCounter>

}
 80035ae:	bf00      	nop
 80035b0:	3738      	adds	r7, #56	; 0x38
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40000400 	.word	0x40000400

080035bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035c2:	e003      	b.n	80035cc <LoopCopyDataInit>

080035c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035ca:	3104      	adds	r1, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035cc:	480b      	ldr	r0, [pc, #44]	; (80035fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035d4:	d3f6      	bcc.n	80035c4 <CopyDataInit>
	ldr	r2, =_sbss
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035d8:	e002      	b.n	80035e0 <LoopFillZerobss>

080035da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035dc:	f842 3b04 	str.w	r3, [r2], #4

080035e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <LoopForever+0x16>)
	cmp	r2, r3
 80035e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035e4:	d3f9      	bcc.n	80035da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035e6:	f7ff fde9 	bl	80031bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ea:	f000 fb89 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ee:	f7ff fc97 	bl	8002f20 <main>

080035f2 <LoopForever>:

LoopForever:
    b LoopForever
 80035f2:	e7fe      	b.n	80035f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035f4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80035f8:	080053d0 	.word	0x080053d0
	ldr	r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003600:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003604:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003608:	200000cc 	.word	0x200000cc

0800360c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_2_IRQHandler>
	...

08003610 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <lsm6ds0_read_byte+0x30>)
 8003620:	7819      	ldrb	r1, [r3, #0]
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	f107 000f 	add.w	r0, r7, #15
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	460b      	mov	r3, r1
 800362e:	2101      	movs	r1, #1
 8003630:	f7ff fa8a 	bl	8002b48 <i2c_master_read>
 8003634:	4603      	mov	r3, r0
 8003636:	781b      	ldrb	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000004 	.word	0x20000004

08003644 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	460a      	mov	r2, r1
 800364e:	71fb      	strb	r3, [r7, #7]
 8003650:	4613      	mov	r3, r2
 8003652:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <lsm6ds0_write_byte+0x28>)
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	79f9      	ldrb	r1, [r7, #7]
 800365a:	79b8      	ldrb	r0, [r7, #6]
 800365c:	2300      	movs	r3, #0
 800365e:	f7ff fa2f 	bl	8002ac0 <i2c_master_write>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000004 	.word	0x20000004

08003670 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800367a:	2064      	movs	r0, #100	; 0x64
 800367c:	f7fe f8e4 	bl	8001848 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003680:	200f      	movs	r0, #15
 8003682:	f7ff ffc5 	bl	8003610 <lsm6ds0_read_byte>
 8003686:	4603      	mov	r3, r0
 8003688:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800368a:	79bb      	ldrb	r3, [r7, #6]
 800368c:	2b68      	cmp	r3, #104	; 0x68
 800368e:	d102      	bne.n	8003696 <lsm6ds0_init+0x26>
	{
		status = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	e00f      	b.n	80036b6 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <lsm6ds0_init+0x60>)
 8003698:	22d6      	movs	r2, #214	; 0xd6
 800369a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800369c:	200f      	movs	r0, #15
 800369e:	f7ff ffb7 	bl	8003610 <lsm6ds0_read_byte>
 80036a2:	4603      	mov	r3, r0
 80036a4:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 80036a6:	79bb      	ldrb	r3, [r7, #6]
 80036a8:	2b68      	cmp	r3, #104	; 0x68
 80036aa:	d102      	bne.n	80036b2 <lsm6ds0_init+0x42>
		{
			status = 1;
 80036ac:	2301      	movs	r3, #1
 80036ae:	71fb      	strb	r3, [r7, #7]
 80036b0:	e001      	b.n	80036b6 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 80036ba:	797b      	ldrb	r3, [r7, #5]
 80036bc:	4619      	mov	r1, r3
 80036be:	2010      	movs	r0, #16
 80036c0:	f7ff ffc0 	bl	8003644 <lsm6ds0_write_byte>

	return status;
 80036c4:	79fb      	ldrb	r3, [r7, #7]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000004 	.word	0x20000004

080036d4 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <lis3mdl_read_byte+0x30>)
 80036e4:	7819      	ldrb	r1, [r3, #0]
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	f107 000f 	add.w	r0, r7, #15
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	460b      	mov	r3, r1
 80036f2:	2101      	movs	r1, #1
 80036f4:	f7ff fa28 	bl	8002b48 <i2c_master_read>
 80036f8:	4603      	mov	r3, r0
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000005 	.word	0x20000005

08003708 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	460a      	mov	r2, r1
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	4613      	mov	r3, r2
 8003716:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <lis3mdl_write_byte+0x28>)
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	79f9      	ldrb	r1, [r7, #7]
 800371e:	79b8      	ldrb	r0, [r7, #6]
 8003720:	2300      	movs	r3, #0
 8003722:	f7ff f9cd 	bl	8002ac0 <i2c_master_write>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000005 	.word	0x20000005

08003734 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
 8003740:	4613      	mov	r3, r2
 8003742:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <lis3mdl_readArray+0x2c>)
 8003746:	7818      	ldrb	r0, [r3, #0]
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	78b9      	ldrb	r1, [r7, #2]
 800374c:	2301      	movs	r3, #1
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4603      	mov	r3, r0
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f9f8 	bl	8002b48 <i2c_master_read>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000005 	.word	0x20000005

08003764 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 8003770:	2022      	movs	r0, #34	; 0x22
 8003772:	f7ff ffaf 	bl	80036d4 <lis3mdl_read_byte>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 800377c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8003786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	2206      	movs	r2, #6
 8003798:	2128      	movs	r1, #40	; 0x28
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffca 	bl	8003734 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 80037a0:	7d7b      	ldrb	r3, [r7, #21]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	7d3b      	ldrb	r3, [r7, #20]
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	7dbb      	ldrb	r3, [r7, #22]
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	4313      	orrs	r3, r2
 80037ba:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 80037bc:	7e7b      	ldrb	r3, [r7, #25]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	b21a      	sxth	r2, r3
 80037c2:	7e3b      	ldrb	r3, [r7, #24]
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	4313      	orrs	r3, r2
 80037c8:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <lis3mdl_get_mag+0xc0>)
 80037cc:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 80037ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037da:	ed97 7a07 	vldr	s14, [r7, #28]
 80037de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 80037e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80037f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 8003802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800380e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	edc3 7a00 	vstr	s15, [r3]
}
 800381c:	bf00      	nop
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	45d5d000 	.word	0x45d5d000

08003828 <lis3mdl_get_azimut>:

float lis3mdl_get_azimut(float x, float y){
 8003828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	ed87 0a01 	vstr	s0, [r7, #4]
 8003834:	edc7 0a00 	vstr	s1, [r7]
	float r,azi;
	r=180/3.14;
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <lis3mdl_get_azimut+0x8c>)
 800383a:	60bb      	str	r3, [r7, #8]
	azi = r*atan2(y,x); // azimuth - measured from x axis
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f7fc fe27 	bl	8000490 <__aeabi_f2d>
 8003842:	4604      	mov	r4, r0
 8003844:	460d      	mov	r5, r1
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	f7fc fe22 	bl	8000490 <__aeabi_f2d>
 800384c:	4680      	mov	r8, r0
 800384e:	4689      	mov	r9, r1
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fc fe1d 	bl	8000490 <__aeabi_f2d>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	ec43 2b11 	vmov	d1, r2, r3
 800385e:	ec49 8b10 	vmov	d0, r8, r9
 8003862:	f000 fa79 	bl	8003d58 <atan2>
 8003866:	ec53 2b10 	vmov	r2, r3, d0
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fc fe67 	bl	8000540 <__aeabi_dmul>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	4618      	mov	r0, r3
 8003878:	4621      	mov	r1, r4
 800387a:	f7fd f911 	bl	8000aa0 <__aeabi_d2f>
 800387e:	4603      	mov	r3, r0
 8003880:	60fb      	str	r3, [r7, #12]
	if (azi < 0){
 8003882:	edd7 7a03 	vldr	s15, [r7, #12]
 8003886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388e:	d507      	bpl.n	80038a0 <lis3mdl_get_azimut+0x78>
		azi+=360;
 8003890:	edd7 7a03 	vldr	s15, [r7, #12]
 8003894:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80038b8 <lis3mdl_get_azimut+0x90>
 8003898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return azi;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	ee07 3a90 	vmov	s15, r3
}
 80038a6:	eeb0 0a67 	vmov.f32	s0, s15
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038b2:	bf00      	nop
 80038b4:	42654ca3 	.word	0x42654ca3
 80038b8:	43b40000 	.word	0x43b40000

080038bc <lis3mdl_init>:

uint8_t lis3mdl_init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80038c6:	2064      	movs	r0, #100	; 0x64
 80038c8:	f7fd ffbe 	bl	8001848 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 80038cc:	200f      	movs	r0, #15
 80038ce:	f7ff ff01 	bl	80036d4 <lis3mdl_read_byte>
 80038d2:	4603      	mov	r3, r0
 80038d4:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 80038d6:	79bb      	ldrb	r3, [r7, #6]
 80038d8:	2b3d      	cmp	r3, #61	; 0x3d
 80038da:	d102      	bne.n	80038e2 <lis3mdl_init+0x26>
	{
		status = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	71fb      	strb	r3, [r7, #7]
 80038e0:	e011      	b.n	8003906 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <lis3mdl_init+0x98>)
 80038e4:	223c      	movs	r2, #60	; 0x3c
 80038e6:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 80038e8:	200f      	movs	r0, #15
 80038ea:	f7ff fef3 	bl	80036d4 <lis3mdl_read_byte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	2b3d      	cmp	r3, #61	; 0x3d
 80038f6:	d102      	bne.n	80038fe <lis3mdl_init+0x42>
		{
			status = 1;
 80038f8:	2301      	movs	r3, #1
 80038fa:	71fb      	strb	r3, [r7, #7]
 80038fc:	e003      	b.n	8003906 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	71fb      	strb	r3, [r7, #7]
			return status;
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	e021      	b.n	800394a <lis3mdl_init+0x8e>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8003906:	23fc      	movs	r3, #252	; 0xfc
 8003908:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 800390a:	797b      	ldrb	r3, [r7, #5]
 800390c:	4619      	mov	r1, r3
 800390e:	2020      	movs	r0, #32
 8003910:	f7ff fefa 	bl	8003708 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8003914:	2300      	movs	r3, #0
 8003916:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8003918:	793b      	ldrb	r3, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	2021      	movs	r0, #33	; 0x21
 800391e:	f7ff fef3 	bl	8003708 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 8003922:	2300      	movs	r3, #0
 8003924:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	4619      	mov	r1, r3
 800392a:	2022      	movs	r0, #34	; 0x22
 800392c:	f7ff feec 	bl	8003708 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8003930:	230c      	movs	r3, #12
 8003932:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8003934:	78bb      	ldrb	r3, [r7, #2]
 8003936:	4619      	mov	r1, r3
 8003938:	2023      	movs	r0, #35	; 0x23
 800393a:	f7ff fee5 	bl	8003708 <lis3mdl_write_byte>

	//lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, 0x40);
	//lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, 0xFC);
	//lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, 0x0C);
	//lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, 0x00);
	uint8_t hovno = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL2); 	//12 gauss
 800393e:	2021      	movs	r0, #33	; 0x21
 8003940:	f7ff fec8 	bl	80036d4 <lis3mdl_read_byte>
 8003944:	4603      	mov	r3, r0
 8003946:	707b      	strb	r3, [r7, #1]

	return status;
 8003948:	79fb      	ldrb	r3, [r7, #7]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000005 	.word	0x20000005

08003958 <hts221_read_byte>:

#include "hts221.h"
#include "i2c.h"


uint8_t hts221_read_byte(uint8_t reg_addr){
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, DEVICE_ADDR_READ, 0));
 8003966:	79fa      	ldrb	r2, [r7, #7]
 8003968:	f107 000f 	add.w	r0, r7, #15
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	23bf      	movs	r3, #191	; 0xbf
 8003972:	2101      	movs	r1, #1
 8003974:	f7ff f8e8 	bl	8002b48 <i2c_master_read>
 8003978:	4603      	mov	r3, r0
 800397a:	781b      	ldrb	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	460a      	mov	r2, r1
 800398e:	71fb      	strb	r3, [r7, #7]
 8003990:	4613      	mov	r3, r2
 8003992:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, DEVICE_ADDR_WRITE, 0);
 8003994:	79f9      	ldrb	r1, [r7, #7]
 8003996:	79b8      	ldrb	r0, [r7, #6]
 8003998:	2300      	movs	r3, #0
 800399a:	22be      	movs	r2, #190	; 0xbe
 800399c:	f7ff f890 	bl	8002ac0 <i2c_master_write>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
 80039b4:	4613      	mov	r3, r2
 80039b6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, DEVICE_ADDR_READ, 1);
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	78b9      	ldrb	r1, [r7, #2]
 80039bc:	2301      	movs	r3, #1
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	23bf      	movs	r3, #191	; 0xbf
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff f8c0 	bl	8002b48 <i2c_master_read>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <hts221_getTemp>:



float hts221_getTemp()
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
	float vystupna;

uint8_t data[2],data_single,pom;	//temp premenne na citanie registrov

//	tvar cisla :  MSB MSB degC(8)
pom=hts221_read_byte(T1_T0_MSB);
 80039d6:	2035      	movs	r0, #53	; 0x35
 80039d8:	f7ff ffbe 	bl	8003958 <hts221_read_byte>
 80039dc:	4603      	mov	r3, r0
 80039de:	77fb      	strb	r3, [r7, #31]
MSB_T0=(int16_t)(pom & 0x3)<<8;	//porovnanie s poslednymi dvoma bitmi a posun o 8
 80039e0:	7ffb      	ldrb	r3, [r7, #31]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	83bb      	strh	r3, [r7, #28]
MSB_T1=(int16_t) (pom & 0xC)<<6;	//porovnanie s 3tim a 4tym od konca a posun   o 6
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	019b      	lsls	r3, r3, #6
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	837b      	strh	r3, [r7, #26]

hts221_readArray(&data_single, T0_degC_x8, 1);
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	2201      	movs	r2, #1
 80039fc:	2132      	movs	r1, #50	; 0x32
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ffd2 	bl	80039a8 <hts221_readArray>
T0_degC = (int16_t) ((data_single | MSB_T0) 	/	8);
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da00      	bge.n	8003a14 <hts221_getTemp+0x44>
 8003a12:	3307      	adds	r3, #7
 8003a14:	10db      	asrs	r3, r3, #3
 8003a16:	833b      	strh	r3, [r7, #24]

hts221_readArray(&data_single, T1_degC_x8, 1);
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2133      	movs	r1, #51	; 0x33
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ffc2 	bl	80039a8 <hts221_readArray>
T1_degC = (int16_t) ((data_single| MSB_T1)	/	8);
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da00      	bge.n	8003a34 <hts221_getTemp+0x64>
 8003a32:	3307      	adds	r3, #7
 8003a34:	10db      	asrs	r3, r3, #3
 8003a36:	82fb      	strh	r3, [r7, #22]

hts221_readArray(data, T0_OUT, 2);
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	213c      	movs	r1, #60	; 0x3c
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ffb1 	bl	80039a8 <hts221_readArray>
T0_out = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);	//spojene do velkej
 8003a46:	7a7b      	ldrb	r3, [r7, #9]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	7a3b      	ldrb	r3, [r7, #8]
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	82bb      	strh	r3, [r7, #20]
hts221_readArray(data, T1_OUT, 2);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	2202      	movs	r2, #2
 8003a5a:	213e      	movs	r1, #62	; 0x3e
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ffa3 	bl	80039a8 <hts221_readArray>
T1_out = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);	//tiez
 8003a62:	7a7b      	ldrb	r3, [r7, #9]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	7a3b      	ldrb	r3, [r7, #8]
 8003a6a:	b21b      	sxth	r3, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	827b      	strh	r3, [r7, #18]

hts221_readArray(data, T_OUT, 2);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	2202      	movs	r2, #2
 8003a76:	212a      	movs	r1, #42	; 0x2a
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff95 	bl	80039a8 <hts221_readArray>
T_out = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);	//tiez
 8003a7e:	7a7b      	ldrb	r3, [r7, #9]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	7a3b      	ldrb	r3, [r7, #8]
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	823b      	strh	r3, [r7, #16]

//https://www.johndcook.com/interpolatorhelp.html
//y1 = T0_degC,y2 = T1_degC;x1 = T0Out, x2 = T1_Out, x3 = T_out
vystupna = 10*(((T1_out - T_out)*T0_degC + (T_out - T0_out)*T1_degC) / (T1_out -T0_out));
 8003a8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a9a:	fb02 f203 	mul.w	r2, r2, r3
 8003a9e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8003aa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003aa6:	1acb      	subs	r3, r1, r3
 8003aa8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	441a      	add	r2, r3
 8003ab2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8003ab6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003aba:	1acb      	subs	r3, r1, r3
 8003abc:	fb92 f2f3 	sdiv	r2, r2, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad0:	edc7 7a03 	vstr	s15, [r7, #12]

return vystupna/10.0f;
 8003ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003adc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ae0:	eef0 7a66 	vmov.f32	s15, s13
}
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <hts221_getHumi>:



uint16_t hts221_getHumi()
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
	uint8_t data[2],singleData;
	uint16_t h0_RH,h1_RH,hOUT,h0_TO,h1_TO,vystupna;

	singleData=hts221_read_byte(H_0_RH);		//koef
 8003af4:	2030      	movs	r0, #48	; 0x30
 8003af6:	f7ff ff2f 	bl	8003958 <hts221_read_byte>
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
	h0_RH=(uint16_t)singleData/2 ;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	81bb      	strh	r3, [r7, #12]

	singleData=hts221_read_byte(H_1_RH);		//koef
 8003b06:	2031      	movs	r0, #49	; 0x31
 8003b08:	f7ff ff26 	bl	8003958 <hts221_read_byte>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]
	h1_RH=(uint16_t)singleData/2 ;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	817b      	strh	r3, [r7, #10]

	hts221_readArray(data, H_OUT, 2);			//hOUT
 8003b18:	463b      	mov	r3, r7
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	2128      	movs	r1, #40	; 0x28
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff42 	bl	80039a8 <hts221_readArray>
	hOUT = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	b21a      	sxth	r2, r3
 8003b2a:	783b      	ldrb	r3, [r7, #0]
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	813b      	strh	r3, [r7, #8]

	hts221_readArray(data, H_0_T0, 2);			//h0_T0
 8003b34:	463b      	mov	r3, r7
 8003b36:	2202      	movs	r2, #2
 8003b38:	2136      	movs	r1, #54	; 0x36
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff34 	bl	80039a8 <hts221_readArray>
	h0_TO = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	b21a      	sxth	r2, r3
 8003b46:	783b      	ldrb	r3, [r7, #0]
 8003b48:	b21b      	sxth	r3, r3
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b21b      	sxth	r3, r3
 8003b4e:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(data, H_1_T0, 2);			//h1_TO
 8003b50:	463b      	mov	r3, r7
 8003b52:	2202      	movs	r2, #2
 8003b54:	213a      	movs	r1, #58	; 0x3a
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff26 	bl	80039a8 <hts221_readArray>
	h1_TO = (int16_t) ((int16_t)data[1] << 8 |	(int16_t)data[0]);
 8003b5c:	787b      	ldrb	r3, [r7, #1]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	783b      	ldrb	r3, [r7, #0]
 8003b64:	b21b      	sxth	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b21b      	sxth	r3, r3
 8003b6a:	80bb      	strh	r3, [r7, #4]
	// h0_RH = y1
	// h1_RH = y2
	// hOUT  = x3
	// h0_TO = x1
	// h1_TO = x2
	vystupna = ((h1_TO - hOUT)*h0_RH + (hOUT - h0_TO)*h1_RH) / (h1_TO-h0_TO);		// % vlhkosti vzduchu
 8003b6c:	88ba      	ldrh	r2, [r7, #4]
 8003b6e:	893b      	ldrh	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	89ba      	ldrh	r2, [r7, #12]
 8003b74:	fb02 f203 	mul.w	r2, r2, r3
 8003b78:	8939      	ldrh	r1, [r7, #8]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	1acb      	subs	r3, r1, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	441a      	add	r2, r3
 8003b86:	88b9      	ldrh	r1, [r7, #4]
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b90:	807b      	strh	r3, [r7, #2]

	return vystupna;
 8003b92:	887b      	ldrh	r3, [r7, #2]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <hts221_init>:

// data[0] 0010 0000
// data[1] 1111 1111
// velkedata = data[1]data[2] -> 1111 1111 0010 0000
uint8_t hts221_init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8003ba6:	2064      	movs	r0, #100	; 0x64
 8003ba8:	f7fd fe4e 	bl	8001848 <LL_mDelay>

	uint8_t val = hts221_read_byte(WHO_AM_I_ADDRESS);
 8003bac:	200f      	movs	r0, #15
 8003bae:	f7ff fed3 	bl	8003958 <hts221_read_byte>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71bb      	strb	r3, [r7, #6]

	if(val == WHO_AM_I_VALUE)
 8003bb6:	79bb      	ldrb	r3, [r7, #6]
 8003bb8:	2bbc      	cmp	r3, #188	; 0xbc
 8003bba:	d102      	bne.n	8003bc2 <hts221_init+0x26>
	{
		status = 1;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	71fb      	strb	r3, [r7, #7]
 8003bc0:	e00c      	b.n	8003bdc <hts221_init+0x40>
	}
	else			//if the device is not found on one address, try another one
	{
		val = hts221_read_byte(WHO_AM_I_ADDRESS);
 8003bc2:	200f      	movs	r0, #15
 8003bc4:	f7ff fec8 	bl	8003958 <hts221_read_byte>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71bb      	strb	r3, [r7, #6]
		if(val == WHO_AM_I_VALUE)
 8003bcc:	79bb      	ldrb	r3, [r7, #6]
 8003bce:	2bbc      	cmp	r3, #188	; 0xbc
 8003bd0:	d102      	bne.n	8003bd8 <hts221_init+0x3c>
		{
			status = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	71fb      	strb	r3, [r7, #7]
 8003bd6:	e001      	b.n	8003bdc <hts221_init+0x40>
		}
		else
		{
			status = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	71fb      	strb	r3, [r7, #7]
		}
	}

	//temp device init

	hts221_write_byte(CTRL_REG1, CTRL_REG1_VAL);	//zapne senzor a da refresh rate 1Hz
 8003bdc:	2181      	movs	r1, #129	; 0x81
 8003bde:	2020      	movs	r0, #32
 8003be0:	f7ff fed0 	bl	8003984 <hts221_write_byte>

	uint8_t nastavenie=hts221_read_byte(CTRL_REG1);
 8003be4:	2020      	movs	r0, #32
 8003be6:	f7ff feb7 	bl	8003958 <hts221_read_byte>
 8003bea:	4603      	mov	r3, r0
 8003bec:	717b      	strb	r3, [r7, #5]


	return status;
 8003bee:	79fb      	ldrb	r3, [r7, #7]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <lps25hb_read_byte>:
 */

#include "i2c.h"
#include "lps25hb.h"

uint8_t lps25hb_read_byte(uint8_t reg_addr){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, DEVICE_ADDR_0, 0));
 8003c06:	79fa      	ldrb	r2, [r7, #7]
 8003c08:	f107 000f 	add.w	r0, r7, #15
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	23bb      	movs	r3, #187	; 0xbb
 8003c12:	2101      	movs	r1, #1
 8003c14:	f7fe ff98 	bl	8002b48 <i2c_master_read>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	781b      	ldrb	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	71fb      	strb	r3, [r7, #7]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, DEVICE_ADDR_0, 0);
 8003c34:	79f9      	ldrb	r1, [r7, #7]
 8003c36:	79b8      	ldrb	r0, [r7, #6]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	22bb      	movs	r2, #187	; 0xbb
 8003c3c:	f7fe ff40 	bl	8002ac0 <i2c_master_write>
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <lps25hb_getPressure>:
	i2c_master_read(data, length, reg, DEVICE_ADDR_0, 1);
}


float lps25hb_getPressure()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
uint8_t pressH,pressL,pressXL;
pressH = lps25hb_read_byte(PRESS_OUT_H);
 8003c4e:	202a      	movs	r0, #42	; 0x2a
 8003c50:	f7ff ffd2 	bl	8003bf8 <lps25hb_read_byte>
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
pressL = lps25hb_read_byte(PRESS_OUT_L);
 8003c58:	2029      	movs	r0, #41	; 0x29
 8003c5a:	f7ff ffcd 	bl	8003bf8 <lps25hb_read_byte>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71bb      	strb	r3, [r7, #6]
pressXL = lps25hb_read_byte(PRESS_OUT_XL);
 8003c62:	2028      	movs	r0, #40	; 0x28
 8003c64:	f7ff ffc8 	bl	8003bf8 <lps25hb_read_byte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	717b      	strb	r3, [r7, #5]

int complement = (pressH<<16) | (pressL<<8) | pressXL;
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	041a      	lsls	r2, r3, #16
 8003c70:	79bb      	ldrb	r3, [r7, #6]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	431a      	orrs	r2, r3
 8003c76:	797b      	ldrb	r3, [r7, #5]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	603b      	str	r3, [r7, #0]
return complement / 4096.1f;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c86:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003c9c <lps25hb_getPressure+0x54>
 8003c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	458000cd 	.word	0x458000cd

08003ca0 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8003caa:	2064      	movs	r0, #100	; 0x64
 8003cac:	f7fd fdcc 	bl	8001848 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(WHO_AM_I_ADDRESS);
 8003cb0:	200f      	movs	r0, #15
 8003cb2:	f7ff ffa1 	bl	8003bf8 <lps25hb_read_byte>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71bb      	strb	r3, [r7, #6]

	if(val == WHO_AM_I_VALUE)
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	2bbd      	cmp	r3, #189	; 0xbd
 8003cbe:	d102      	bne.n	8003cc6 <lps25hb_init+0x26>
	{
		status = 1;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	71fb      	strb	r3, [r7, #7]
 8003cc4:	e00c      	b.n	8003ce0 <lps25hb_init+0x40>
	}
	else			//if the device is not found on one address, try another one
	{
		val = lps25hb_read_byte(WHO_AM_I_ADDRESS);
 8003cc6:	200f      	movs	r0, #15
 8003cc8:	f7ff ff96 	bl	8003bf8 <lps25hb_read_byte>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71bb      	strb	r3, [r7, #6]
		if(val == WHO_AM_I_VALUE)
 8003cd0:	79bb      	ldrb	r3, [r7, #6]
 8003cd2:	2bbd      	cmp	r3, #189	; 0xbd
 8003cd4:	d102      	bne.n	8003cdc <lps25hb_init+0x3c>
		{
			status = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	71fb      	strb	r3, [r7, #7]
 8003cda:	e001      	b.n	8003ce0 <lps25hb_init+0x40>
		}
		else
		{
			status = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
		}
	}

	//lps device init
	lps25hb_write_byte(CNTRL_REG1, CNTRL_REG1_VAL);	//zapne a cita kazdu sekundu
 8003ce0:	2190      	movs	r1, #144	; 0x90
 8003ce2:	2020      	movs	r0, #32
 8003ce4:	f7ff ff9e 	bl	8003c24 <lps25hb_write_byte>
	return status;
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <__errno>:
 8003cf4:	4b01      	ldr	r3, [pc, #4]	; (8003cfc <__errno+0x8>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000008 	.word	0x20000008

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4e0d      	ldr	r6, [pc, #52]	; (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1ba4      	subs	r4, r4, r6
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2500      	movs	r5, #0
 8003d0c:	42a5      	cmp	r5, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4e0b      	ldr	r6, [pc, #44]	; (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	; (8003d44 <__libc_init_array+0x44>)
 8003d14:	f001 fafa 	bl	800530c <_init>
 8003d18:	1ba4      	subs	r4, r4, r6
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2500      	movs	r5, #0
 8003d1e:	42a5      	cmp	r5, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d28:	4798      	blx	r3
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d32:	4798      	blx	r3
 8003d34:	3501      	adds	r5, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	080053c8 	.word	0x080053c8
 8003d3c:	080053c8 	.word	0x080053c8
 8003d40:	080053c8 	.word	0x080053c8
 8003d44:	080053cc 	.word	0x080053cc

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <atan2>:
 8003d58:	f000 b972 	b.w	8004040 <__ieee754_atan2>

08003d5c <pow>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	ed2d 8b04 	vpush	{d8-d9}
 8003d64:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004038 <pow+0x2dc>
 8003d68:	b08d      	sub	sp, #52	; 0x34
 8003d6a:	ec57 6b10 	vmov	r6, r7, d0
 8003d6e:	ec55 4b11 	vmov	r4, r5, d1
 8003d72:	f000 fa45 	bl	8004200 <__ieee754_pow>
 8003d76:	f999 3000 	ldrsb.w	r3, [r9]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	eeb0 8a40 	vmov.f32	s16, s0
 8003d82:	eef0 8a60 	vmov.f32	s17, s1
 8003d86:	46c8      	mov	r8, r9
 8003d88:	d05f      	beq.n	8003e4a <pow+0xee>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7fc fe6f 	bl	8000a74 <__aeabi_dcmpun>
 8003d96:	4683      	mov	fp, r0
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d156      	bne.n	8003e4a <pow+0xee>
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	463b      	mov	r3, r7
 8003da0:	4630      	mov	r0, r6
 8003da2:	4639      	mov	r1, r7
 8003da4:	f7fc fe66 	bl	8000a74 <__aeabi_dcmpun>
 8003da8:	9001      	str	r0, [sp, #4]
 8003daa:	b1e8      	cbz	r0, 8003de8 <pow+0x8c>
 8003dac:	2200      	movs	r2, #0
 8003dae:	2300      	movs	r3, #0
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	f7fc fe2c 	bl	8000a10 <__aeabi_dcmpeq>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d046      	beq.n	8003e4a <pow+0xee>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	4b96      	ldr	r3, [pc, #600]	; (800401c <pow+0x2c0>)
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	4b96      	ldr	r3, [pc, #600]	; (8004020 <pow+0x2c4>)
 8003dc6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003dca:	2200      	movs	r2, #0
 8003dcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003dd0:	9b00      	ldr	r3, [sp, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ddc:	d033      	beq.n	8003e46 <pow+0xea>
 8003dde:	a802      	add	r0, sp, #8
 8003de0:	f001 f97f 	bl	80050e2 <matherr>
 8003de4:	bb48      	cbnz	r0, 8003e3a <pow+0xde>
 8003de6:	e05d      	b.n	8003ea4 <pow+0x148>
 8003de8:	f04f 0a00 	mov.w	sl, #0
 8003dec:	f04f 0b00 	mov.w	fp, #0
 8003df0:	4652      	mov	r2, sl
 8003df2:	465b      	mov	r3, fp
 8003df4:	4630      	mov	r0, r6
 8003df6:	4639      	mov	r1, r7
 8003df8:	f7fc fe0a 	bl	8000a10 <__aeabi_dcmpeq>
 8003dfc:	ec4b ab19 	vmov	d9, sl, fp
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d054      	beq.n	8003eae <pow+0x152>
 8003e04:	4652      	mov	r2, sl
 8003e06:	465b      	mov	r3, fp
 8003e08:	4620      	mov	r0, r4
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	f7fc fe00 	bl	8000a10 <__aeabi_dcmpeq>
 8003e10:	4680      	mov	r8, r0
 8003e12:	b318      	cbz	r0, 8003e5c <pow+0x100>
 8003e14:	2301      	movs	r3, #1
 8003e16:	9302      	str	r3, [sp, #8]
 8003e18:	4b80      	ldr	r3, [pc, #512]	; (800401c <pow+0x2c0>)
 8003e1a:	9303      	str	r3, [sp, #12]
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e20:	9b00      	ldr	r3, [sp, #0]
 8003e22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0d5      	beq.n	8003dde <pow+0x82>
 8003e32:	4b7b      	ldr	r3, [pc, #492]	; (8004020 <pow+0x2c4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e3c:	b11b      	cbz	r3, 8003e46 <pow+0xea>
 8003e3e:	f7ff ff59 	bl	8003cf4 <__errno>
 8003e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e44:	6003      	str	r3, [r0, #0]
 8003e46:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e4e:	eef0 0a68 	vmov.f32	s1, s17
 8003e52:	b00d      	add	sp, #52	; 0x34
 8003e54:	ecbd 8b04 	vpop	{d8-d9}
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	ec45 4b10 	vmov	d0, r4, r5
 8003e60:	f001 f937 	bl	80050d2 <finite>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d0f0      	beq.n	8003e4a <pow+0xee>
 8003e68:	4652      	mov	r2, sl
 8003e6a:	465b      	mov	r3, fp
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	4629      	mov	r1, r5
 8003e70:	f7fc fdd8 	bl	8000a24 <__aeabi_dcmplt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0e8      	beq.n	8003e4a <pow+0xee>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <pow+0x2c0>)
 8003e7e:	9303      	str	r3, [sp, #12]
 8003e80:	f999 3000 	ldrsb.w	r3, [r9]
 8003e84:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003e88:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e8c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e90:	b913      	cbnz	r3, 8003e98 <pow+0x13c>
 8003e92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003e96:	e7a2      	b.n	8003dde <pow+0x82>
 8003e98:	4962      	ldr	r1, [pc, #392]	; (8004024 <pow+0x2c8>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d19c      	bne.n	8003dde <pow+0x82>
 8003ea4:	f7ff ff26 	bl	8003cf4 <__errno>
 8003ea8:	2321      	movs	r3, #33	; 0x21
 8003eaa:	6003      	str	r3, [r0, #0]
 8003eac:	e7c5      	b.n	8003e3a <pow+0xde>
 8003eae:	eeb0 0a48 	vmov.f32	s0, s16
 8003eb2:	eef0 0a68 	vmov.f32	s1, s17
 8003eb6:	f001 f90c 	bl	80050d2 <finite>
 8003eba:	9000      	str	r0, [sp, #0]
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f040 8081 	bne.w	8003fc4 <pow+0x268>
 8003ec2:	ec47 6b10 	vmov	d0, r6, r7
 8003ec6:	f001 f904 	bl	80050d2 <finite>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d07a      	beq.n	8003fc4 <pow+0x268>
 8003ece:	ec45 4b10 	vmov	d0, r4, r5
 8003ed2:	f001 f8fe 	bl	80050d2 <finite>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d074      	beq.n	8003fc4 <pow+0x268>
 8003eda:	ec53 2b18 	vmov	r2, r3, d8
 8003ede:	ee18 0a10 	vmov	r0, s16
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fc fdc6 	bl	8000a74 <__aeabi_dcmpun>
 8003ee8:	f999 9000 	ldrsb.w	r9, [r9]
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <pow+0x2c0>)
 8003eee:	b1b0      	cbz	r0, 8003f1e <pow+0x1c2>
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8003efa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003efe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f02:	f1b9 0f00 	cmp.w	r9, #0
 8003f06:	d0c4      	beq.n	8003e92 <pow+0x136>
 8003f08:	4652      	mov	r2, sl
 8003f0a:	465b      	mov	r3, fp
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	4659      	mov	r1, fp
 8003f10:	f7fc fc40 	bl	8000794 <__aeabi_ddiv>
 8003f14:	f1b9 0f02 	cmp.w	r9, #2
 8003f18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f1c:	e7c1      	b.n	8003ea2 <pow+0x146>
 8003f1e:	2203      	movs	r2, #3
 8003f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f24:	900a      	str	r0, [sp, #40]	; 0x28
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <pow+0x2cc>)
 8003f2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f36:	f7fc fb03 	bl	8000540 <__aeabi_dmul>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	f1b9 0f00 	cmp.w	r9, #0
 8003f42:	d124      	bne.n	8003f8e <pow+0x232>
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <pow+0x2d0>)
 8003f46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003f4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f4e:	4630      	mov	r0, r6
 8003f50:	4652      	mov	r2, sl
 8003f52:	465b      	mov	r3, fp
 8003f54:	4639      	mov	r1, r7
 8003f56:	f7fc fd65 	bl	8000a24 <__aeabi_dcmplt>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d056      	beq.n	800400c <pow+0x2b0>
 8003f5e:	ec45 4b10 	vmov	d0, r4, r5
 8003f62:	f001 f8c9 	bl	80050f8 <rint>
 8003f66:	4622      	mov	r2, r4
 8003f68:	462b      	mov	r3, r5
 8003f6a:	ec51 0b10 	vmov	r0, r1, d0
 8003f6e:	f7fc fd4f 	bl	8000a10 <__aeabi_dcmpeq>
 8003f72:	b920      	cbnz	r0, 8003f7e <pow+0x222>
 8003f74:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <pow+0x2d4>)
 8003f76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003f7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f7e:	f998 3000 	ldrsb.w	r3, [r8]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d142      	bne.n	800400c <pow+0x2b0>
 8003f86:	f7ff feb5 	bl	8003cf4 <__errno>
 8003f8a:	2322      	movs	r3, #34	; 0x22
 8003f8c:	e78d      	b.n	8003eaa <pow+0x14e>
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <pow+0x2d8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f96:	4630      	mov	r0, r6
 8003f98:	4652      	mov	r2, sl
 8003f9a:	465b      	mov	r3, fp
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc fd41 	bl	8000a24 <__aeabi_dcmplt>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d0eb      	beq.n	8003f7e <pow+0x222>
 8003fa6:	ec45 4b10 	vmov	d0, r4, r5
 8003faa:	f001 f8a5 	bl	80050f8 <rint>
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	ec51 0b10 	vmov	r0, r1, d0
 8003fb6:	f7fc fd2b 	bl	8000a10 <__aeabi_dcmpeq>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1df      	bne.n	8003f7e <pow+0x222>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <pow+0x2c8>)
 8003fc2:	e7da      	b.n	8003f7a <pow+0x21e>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	ec51 0b18 	vmov	r0, r1, d8
 8003fcc:	f7fc fd20 	bl	8000a10 <__aeabi_dcmpeq>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	f43f af3a 	beq.w	8003e4a <pow+0xee>
 8003fd6:	ec47 6b10 	vmov	d0, r6, r7
 8003fda:	f001 f87a 	bl	80050d2 <finite>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	f43f af33 	beq.w	8003e4a <pow+0xee>
 8003fe4:	ec45 4b10 	vmov	d0, r4, r5
 8003fe8:	f001 f873 	bl	80050d2 <finite>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f43f af2c 	beq.w	8003e4a <pow+0xee>
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	9302      	str	r3, [sp, #8]
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <pow+0x2c0>)
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8003ffe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004002:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004006:	ed8d 9b08 	vstr	d9, [sp, #32]
 800400a:	e7b8      	b.n	8003f7e <pow+0x222>
 800400c:	a802      	add	r0, sp, #8
 800400e:	f001 f868 	bl	80050e2 <matherr>
 8004012:	2800      	cmp	r0, #0
 8004014:	f47f af11 	bne.w	8003e3a <pow+0xde>
 8004018:	e7b5      	b.n	8003f86 <pow+0x22a>
 800401a:	bf00      	nop
 800401c:	0800533d 	.word	0x0800533d
 8004020:	3ff00000 	.word	0x3ff00000
 8004024:	fff00000 	.word	0xfff00000
 8004028:	3fe00000 	.word	0x3fe00000
 800402c:	47efffff 	.word	0x47efffff
 8004030:	c7efffff 	.word	0xc7efffff
 8004034:	7ff00000 	.word	0x7ff00000
 8004038:	2000006c 	.word	0x2000006c
 800403c:	00000000 	.word	0x00000000

08004040 <__ieee754_atan2>:
 8004040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004044:	ec57 6b11 	vmov	r6, r7, d1
 8004048:	4273      	negs	r3, r6
 800404a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800404e:	4333      	orrs	r3, r6
 8004050:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80041f8 <__ieee754_atan2+0x1b8>
 8004054:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004058:	4573      	cmp	r3, lr
 800405a:	ec51 0b10 	vmov	r0, r1, d0
 800405e:	ee11 8a10 	vmov	r8, s2
 8004062:	d80a      	bhi.n	800407a <__ieee754_atan2+0x3a>
 8004064:	4244      	negs	r4, r0
 8004066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800406a:	4304      	orrs	r4, r0
 800406c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004070:	4574      	cmp	r4, lr
 8004072:	468c      	mov	ip, r1
 8004074:	ee10 9a10 	vmov	r9, s0
 8004078:	d907      	bls.n	800408a <__ieee754_atan2+0x4a>
 800407a:	4632      	mov	r2, r6
 800407c:	463b      	mov	r3, r7
 800407e:	f7fc f8a9 	bl	80001d4 <__adddf3>
 8004082:	ec41 0b10 	vmov	d0, r0, r1
 8004086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800408e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004092:	4334      	orrs	r4, r6
 8004094:	d103      	bne.n	800409e <__ieee754_atan2+0x5e>
 8004096:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800409a:	f000 be71 	b.w	8004d80 <atan>
 800409e:	17bc      	asrs	r4, r7, #30
 80040a0:	f004 0402 	and.w	r4, r4, #2
 80040a4:	ea53 0909 	orrs.w	r9, r3, r9
 80040a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80040ac:	d107      	bne.n	80040be <__ieee754_atan2+0x7e>
 80040ae:	2c02      	cmp	r4, #2
 80040b0:	d073      	beq.n	800419a <__ieee754_atan2+0x15a>
 80040b2:	2c03      	cmp	r4, #3
 80040b4:	d1e5      	bne.n	8004082 <__ieee754_atan2+0x42>
 80040b6:	a13e      	add	r1, pc, #248	; (adr r1, 80041b0 <__ieee754_atan2+0x170>)
 80040b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040bc:	e7e1      	b.n	8004082 <__ieee754_atan2+0x42>
 80040be:	ea52 0808 	orrs.w	r8, r2, r8
 80040c2:	d106      	bne.n	80040d2 <__ieee754_atan2+0x92>
 80040c4:	f1bc 0f00 	cmp.w	ip, #0
 80040c8:	da6b      	bge.n	80041a2 <__ieee754_atan2+0x162>
 80040ca:	a13b      	add	r1, pc, #236	; (adr r1, 80041b8 <__ieee754_atan2+0x178>)
 80040cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d0:	e7d7      	b.n	8004082 <__ieee754_atan2+0x42>
 80040d2:	4572      	cmp	r2, lr
 80040d4:	d120      	bne.n	8004118 <__ieee754_atan2+0xd8>
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d111      	bne.n	80040fe <__ieee754_atan2+0xbe>
 80040da:	2c02      	cmp	r4, #2
 80040dc:	d007      	beq.n	80040ee <__ieee754_atan2+0xae>
 80040de:	2c03      	cmp	r4, #3
 80040e0:	d009      	beq.n	80040f6 <__ieee754_atan2+0xb6>
 80040e2:	2c01      	cmp	r4, #1
 80040e4:	d155      	bne.n	8004192 <__ieee754_atan2+0x152>
 80040e6:	a136      	add	r1, pc, #216	; (adr r1, 80041c0 <__ieee754_atan2+0x180>)
 80040e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ec:	e7c9      	b.n	8004082 <__ieee754_atan2+0x42>
 80040ee:	a136      	add	r1, pc, #216	; (adr r1, 80041c8 <__ieee754_atan2+0x188>)
 80040f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040f4:	e7c5      	b.n	8004082 <__ieee754_atan2+0x42>
 80040f6:	a136      	add	r1, pc, #216	; (adr r1, 80041d0 <__ieee754_atan2+0x190>)
 80040f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040fc:	e7c1      	b.n	8004082 <__ieee754_atan2+0x42>
 80040fe:	2c02      	cmp	r4, #2
 8004100:	d04b      	beq.n	800419a <__ieee754_atan2+0x15a>
 8004102:	2c03      	cmp	r4, #3
 8004104:	d0d7      	beq.n	80040b6 <__ieee754_atan2+0x76>
 8004106:	2c01      	cmp	r4, #1
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	d102      	bne.n	8004114 <__ieee754_atan2+0xd4>
 800410e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004112:	e7b6      	b.n	8004082 <__ieee754_atan2+0x42>
 8004114:	2100      	movs	r1, #0
 8004116:	e7b4      	b.n	8004082 <__ieee754_atan2+0x42>
 8004118:	4573      	cmp	r3, lr
 800411a:	d0d3      	beq.n	80040c4 <__ieee754_atan2+0x84>
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	151b      	asrs	r3, r3, #20
 8004120:	2b3c      	cmp	r3, #60	; 0x3c
 8004122:	dc1e      	bgt.n	8004162 <__ieee754_atan2+0x122>
 8004124:	2f00      	cmp	r7, #0
 8004126:	da01      	bge.n	800412c <__ieee754_atan2+0xec>
 8004128:	333c      	adds	r3, #60	; 0x3c
 800412a:	db1e      	blt.n	800416a <__ieee754_atan2+0x12a>
 800412c:	4632      	mov	r2, r6
 800412e:	463b      	mov	r3, r7
 8004130:	f7fc fb30 	bl	8000794 <__aeabi_ddiv>
 8004134:	ec41 0b10 	vmov	d0, r0, r1
 8004138:	f000 ffc2 	bl	80050c0 <fabs>
 800413c:	f000 fe20 	bl	8004d80 <atan>
 8004140:	ec51 0b10 	vmov	r0, r1, d0
 8004144:	2c01      	cmp	r4, #1
 8004146:	d013      	beq.n	8004170 <__ieee754_atan2+0x130>
 8004148:	2c02      	cmp	r4, #2
 800414a:	d015      	beq.n	8004178 <__ieee754_atan2+0x138>
 800414c:	2c00      	cmp	r4, #0
 800414e:	d098      	beq.n	8004082 <__ieee754_atan2+0x42>
 8004150:	a321      	add	r3, pc, #132	; (adr r3, 80041d8 <__ieee754_atan2+0x198>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc f83b 	bl	80001d0 <__aeabi_dsub>
 800415a:	a321      	add	r3, pc, #132	; (adr r3, 80041e0 <__ieee754_atan2+0x1a0>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	e014      	b.n	800418c <__ieee754_atan2+0x14c>
 8004162:	a121      	add	r1, pc, #132	; (adr r1, 80041e8 <__ieee754_atan2+0x1a8>)
 8004164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004168:	e7ec      	b.n	8004144 <__ieee754_atan2+0x104>
 800416a:	2000      	movs	r0, #0
 800416c:	2100      	movs	r1, #0
 800416e:	e7e9      	b.n	8004144 <__ieee754_atan2+0x104>
 8004170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004174:	4619      	mov	r1, r3
 8004176:	e784      	b.n	8004082 <__ieee754_atan2+0x42>
 8004178:	a317      	add	r3, pc, #92	; (adr r3, 80041d8 <__ieee754_atan2+0x198>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc f827 	bl	80001d0 <__aeabi_dsub>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	a116      	add	r1, pc, #88	; (adr r1, 80041e0 <__ieee754_atan2+0x1a0>)
 8004188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800418c:	f7fc f820 	bl	80001d0 <__aeabi_dsub>
 8004190:	e777      	b.n	8004082 <__ieee754_atan2+0x42>
 8004192:	a117      	add	r1, pc, #92	; (adr r1, 80041f0 <__ieee754_atan2+0x1b0>)
 8004194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004198:	e773      	b.n	8004082 <__ieee754_atan2+0x42>
 800419a:	a111      	add	r1, pc, #68	; (adr r1, 80041e0 <__ieee754_atan2+0x1a0>)
 800419c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041a0:	e76f      	b.n	8004082 <__ieee754_atan2+0x42>
 80041a2:	a111      	add	r1, pc, #68	; (adr r1, 80041e8 <__ieee754_atan2+0x1a8>)
 80041a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041a8:	e76b      	b.n	8004082 <__ieee754_atan2+0x42>
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w
 80041b0:	54442d18 	.word	0x54442d18
 80041b4:	c00921fb 	.word	0xc00921fb
 80041b8:	54442d18 	.word	0x54442d18
 80041bc:	bff921fb 	.word	0xbff921fb
 80041c0:	54442d18 	.word	0x54442d18
 80041c4:	bfe921fb 	.word	0xbfe921fb
 80041c8:	7f3321d2 	.word	0x7f3321d2
 80041cc:	4002d97c 	.word	0x4002d97c
 80041d0:	7f3321d2 	.word	0x7f3321d2
 80041d4:	c002d97c 	.word	0xc002d97c
 80041d8:	33145c07 	.word	0x33145c07
 80041dc:	3ca1a626 	.word	0x3ca1a626
 80041e0:	54442d18 	.word	0x54442d18
 80041e4:	400921fb 	.word	0x400921fb
 80041e8:	54442d18 	.word	0x54442d18
 80041ec:	3ff921fb 	.word	0x3ff921fb
 80041f0:	54442d18 	.word	0x54442d18
 80041f4:	3fe921fb 	.word	0x3fe921fb
 80041f8:	7ff00000 	.word	0x7ff00000
 80041fc:	00000000 	.word	0x00000000

08004200 <__ieee754_pow>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	b091      	sub	sp, #68	; 0x44
 8004206:	ed8d 1b00 	vstr	d1, [sp]
 800420a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800420e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004212:	ea58 0302 	orrs.w	r3, r8, r2
 8004216:	ec57 6b10 	vmov	r6, r7, d0
 800421a:	f000 84be 	beq.w	8004b9a <__ieee754_pow+0x99a>
 800421e:	4b7a      	ldr	r3, [pc, #488]	; (8004408 <__ieee754_pow+0x208>)
 8004220:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004224:	429c      	cmp	r4, r3
 8004226:	463d      	mov	r5, r7
 8004228:	ee10 aa10 	vmov	sl, s0
 800422c:	dc09      	bgt.n	8004242 <__ieee754_pow+0x42>
 800422e:	d103      	bne.n	8004238 <__ieee754_pow+0x38>
 8004230:	b93e      	cbnz	r6, 8004242 <__ieee754_pow+0x42>
 8004232:	45a0      	cmp	r8, r4
 8004234:	dc0d      	bgt.n	8004252 <__ieee754_pow+0x52>
 8004236:	e001      	b.n	800423c <__ieee754_pow+0x3c>
 8004238:	4598      	cmp	r8, r3
 800423a:	dc02      	bgt.n	8004242 <__ieee754_pow+0x42>
 800423c:	4598      	cmp	r8, r3
 800423e:	d10e      	bne.n	800425e <__ieee754_pow+0x5e>
 8004240:	b16a      	cbz	r2, 800425e <__ieee754_pow+0x5e>
 8004242:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004246:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800424a:	ea54 030a 	orrs.w	r3, r4, sl
 800424e:	f000 84a4 	beq.w	8004b9a <__ieee754_pow+0x99a>
 8004252:	486e      	ldr	r0, [pc, #440]	; (800440c <__ieee754_pow+0x20c>)
 8004254:	b011      	add	sp, #68	; 0x44
 8004256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	f000 bf45 	b.w	80050e8 <nan>
 800425e:	2d00      	cmp	r5, #0
 8004260:	da53      	bge.n	800430a <__ieee754_pow+0x10a>
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <__ieee754_pow+0x210>)
 8004264:	4598      	cmp	r8, r3
 8004266:	dc4d      	bgt.n	8004304 <__ieee754_pow+0x104>
 8004268:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800426c:	4598      	cmp	r8, r3
 800426e:	dd4c      	ble.n	800430a <__ieee754_pow+0x10a>
 8004270:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004274:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004278:	2b14      	cmp	r3, #20
 800427a:	dd26      	ble.n	80042ca <__ieee754_pow+0xca>
 800427c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004280:	fa22 f103 	lsr.w	r1, r2, r3
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	4293      	cmp	r3, r2
 800428a:	d13e      	bne.n	800430a <__ieee754_pow+0x10a>
 800428c:	f001 0101 	and.w	r1, r1, #1
 8004290:	f1c1 0b02 	rsb	fp, r1, #2
 8004294:	2a00      	cmp	r2, #0
 8004296:	d15b      	bne.n	8004350 <__ieee754_pow+0x150>
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <__ieee754_pow+0x208>)
 800429a:	4598      	cmp	r8, r3
 800429c:	d124      	bne.n	80042e8 <__ieee754_pow+0xe8>
 800429e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80042a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80042a6:	ea53 030a 	orrs.w	r3, r3, sl
 80042aa:	f000 8476 	beq.w	8004b9a <__ieee754_pow+0x99a>
 80042ae:	4b59      	ldr	r3, [pc, #356]	; (8004414 <__ieee754_pow+0x214>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	dd2d      	ble.n	8004310 <__ieee754_pow+0x110>
 80042b4:	f1b9 0f00 	cmp.w	r9, #0
 80042b8:	f280 8473 	bge.w	8004ba2 <__ieee754_pow+0x9a2>
 80042bc:	2000      	movs	r0, #0
 80042be:	2100      	movs	r1, #0
 80042c0:	ec41 0b10 	vmov	d0, r0, r1
 80042c4:	b011      	add	sp, #68	; 0x44
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d13e      	bne.n	800434c <__ieee754_pow+0x14c>
 80042ce:	f1c3 0314 	rsb	r3, r3, #20
 80042d2:	fa48 f103 	asr.w	r1, r8, r3
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	4543      	cmp	r3, r8
 80042dc:	f040 8469 	bne.w	8004bb2 <__ieee754_pow+0x9b2>
 80042e0:	f001 0101 	and.w	r1, r1, #1
 80042e4:	f1c1 0b02 	rsb	fp, r1, #2
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <__ieee754_pow+0x218>)
 80042ea:	4598      	cmp	r8, r3
 80042ec:	d118      	bne.n	8004320 <__ieee754_pow+0x120>
 80042ee:	f1b9 0f00 	cmp.w	r9, #0
 80042f2:	f280 845a 	bge.w	8004baa <__ieee754_pow+0x9aa>
 80042f6:	4948      	ldr	r1, [pc, #288]	; (8004418 <__ieee754_pow+0x218>)
 80042f8:	4632      	mov	r2, r6
 80042fa:	463b      	mov	r3, r7
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7fc fa49 	bl	8000794 <__aeabi_ddiv>
 8004302:	e7dd      	b.n	80042c0 <__ieee754_pow+0xc0>
 8004304:	f04f 0b02 	mov.w	fp, #2
 8004308:	e7c4      	b.n	8004294 <__ieee754_pow+0x94>
 800430a:	f04f 0b00 	mov.w	fp, #0
 800430e:	e7c1      	b.n	8004294 <__ieee754_pow+0x94>
 8004310:	f1b9 0f00 	cmp.w	r9, #0
 8004314:	dad2      	bge.n	80042bc <__ieee754_pow+0xbc>
 8004316:	e9dd 0300 	ldrd	r0, r3, [sp]
 800431a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800431e:	e7cf      	b.n	80042c0 <__ieee754_pow+0xc0>
 8004320:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004324:	d106      	bne.n	8004334 <__ieee754_pow+0x134>
 8004326:	4632      	mov	r2, r6
 8004328:	463b      	mov	r3, r7
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f7fc f907 	bl	8000540 <__aeabi_dmul>
 8004332:	e7c5      	b.n	80042c0 <__ieee754_pow+0xc0>
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <__ieee754_pow+0x21c>)
 8004336:	4599      	cmp	r9, r3
 8004338:	d10a      	bne.n	8004350 <__ieee754_pow+0x150>
 800433a:	2d00      	cmp	r5, #0
 800433c:	db08      	blt.n	8004350 <__ieee754_pow+0x150>
 800433e:	ec47 6b10 	vmov	d0, r6, r7
 8004342:	b011      	add	sp, #68	; 0x44
 8004344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004348:	f000 bc68 	b.w	8004c1c <__ieee754_sqrt>
 800434c:	f04f 0b00 	mov.w	fp, #0
 8004350:	ec47 6b10 	vmov	d0, r6, r7
 8004354:	f000 feb4 	bl	80050c0 <fabs>
 8004358:	ec51 0b10 	vmov	r0, r1, d0
 800435c:	f1ba 0f00 	cmp.w	sl, #0
 8004360:	d127      	bne.n	80043b2 <__ieee754_pow+0x1b2>
 8004362:	b124      	cbz	r4, 800436e <__ieee754_pow+0x16e>
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <__ieee754_pow+0x218>)
 8004366:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800436a:	429a      	cmp	r2, r3
 800436c:	d121      	bne.n	80043b2 <__ieee754_pow+0x1b2>
 800436e:	f1b9 0f00 	cmp.w	r9, #0
 8004372:	da05      	bge.n	8004380 <__ieee754_pow+0x180>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	2000      	movs	r0, #0
 800437a:	4927      	ldr	r1, [pc, #156]	; (8004418 <__ieee754_pow+0x218>)
 800437c:	f7fc fa0a 	bl	8000794 <__aeabi_ddiv>
 8004380:	2d00      	cmp	r5, #0
 8004382:	da9d      	bge.n	80042c0 <__ieee754_pow+0xc0>
 8004384:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004388:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800438c:	ea54 030b 	orrs.w	r3, r4, fp
 8004390:	d108      	bne.n	80043a4 <__ieee754_pow+0x1a4>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	f7fb ff19 	bl	80001d0 <__aeabi_dsub>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	e7ac      	b.n	80042fe <__ieee754_pow+0xfe>
 80043a4:	f1bb 0f01 	cmp.w	fp, #1
 80043a8:	d18a      	bne.n	80042c0 <__ieee754_pow+0xc0>
 80043aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043ae:	4619      	mov	r1, r3
 80043b0:	e786      	b.n	80042c0 <__ieee754_pow+0xc0>
 80043b2:	0fed      	lsrs	r5, r5, #31
 80043b4:	1e6b      	subs	r3, r5, #1
 80043b6:	930d      	str	r3, [sp, #52]	; 0x34
 80043b8:	ea5b 0303 	orrs.w	r3, fp, r3
 80043bc:	d102      	bne.n	80043c4 <__ieee754_pow+0x1c4>
 80043be:	4632      	mov	r2, r6
 80043c0:	463b      	mov	r3, r7
 80043c2:	e7e8      	b.n	8004396 <__ieee754_pow+0x196>
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <__ieee754_pow+0x220>)
 80043c6:	4598      	cmp	r8, r3
 80043c8:	f340 80fe 	ble.w	80045c8 <__ieee754_pow+0x3c8>
 80043cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80043d0:	4598      	cmp	r8, r3
 80043d2:	dd0a      	ble.n	80043ea <__ieee754_pow+0x1ea>
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <__ieee754_pow+0x214>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	dc0d      	bgt.n	80043f6 <__ieee754_pow+0x1f6>
 80043da:	f1b9 0f00 	cmp.w	r9, #0
 80043de:	f6bf af6d 	bge.w	80042bc <__ieee754_pow+0xbc>
 80043e2:	a307      	add	r3, pc, #28	; (adr r3, 8004400 <__ieee754_pow+0x200>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	e79f      	b.n	800432a <__ieee754_pow+0x12a>
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <__ieee754_pow+0x224>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	ddf4      	ble.n	80043da <__ieee754_pow+0x1da>
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <__ieee754_pow+0x218>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	dd18      	ble.n	8004428 <__ieee754_pow+0x228>
 80043f6:	f1b9 0f00 	cmp.w	r9, #0
 80043fa:	dcf2      	bgt.n	80043e2 <__ieee754_pow+0x1e2>
 80043fc:	e75e      	b.n	80042bc <__ieee754_pow+0xbc>
 80043fe:	bf00      	nop
 8004400:	8800759c 	.word	0x8800759c
 8004404:	7e37e43c 	.word	0x7e37e43c
 8004408:	7ff00000 	.word	0x7ff00000
 800440c:	08005340 	.word	0x08005340
 8004410:	433fffff 	.word	0x433fffff
 8004414:	3fefffff 	.word	0x3fefffff
 8004418:	3ff00000 	.word	0x3ff00000
 800441c:	3fe00000 	.word	0x3fe00000
 8004420:	41e00000 	.word	0x41e00000
 8004424:	3feffffe 	.word	0x3feffffe
 8004428:	2200      	movs	r2, #0
 800442a:	4b63      	ldr	r3, [pc, #396]	; (80045b8 <__ieee754_pow+0x3b8>)
 800442c:	f7fb fed0 	bl	80001d0 <__aeabi_dsub>
 8004430:	a355      	add	r3, pc, #340	; (adr r3, 8004588 <__ieee754_pow+0x388>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	4604      	mov	r4, r0
 8004438:	460d      	mov	r5, r1
 800443a:	f7fc f881 	bl	8000540 <__aeabi_dmul>
 800443e:	a354      	add	r3, pc, #336	; (adr r3, 8004590 <__ieee754_pow+0x390>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	4606      	mov	r6, r0
 8004446:	460f      	mov	r7, r1
 8004448:	4620      	mov	r0, r4
 800444a:	4629      	mov	r1, r5
 800444c:	f7fc f878 	bl	8000540 <__aeabi_dmul>
 8004450:	2200      	movs	r2, #0
 8004452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <__ieee754_pow+0x3bc>)
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	f7fc f870 	bl	8000540 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	a14c      	add	r1, pc, #304	; (adr r1, 8004598 <__ieee754_pow+0x398>)
 8004466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800446a:	f7fb feb1 	bl	80001d0 <__aeabi_dsub>
 800446e:	4622      	mov	r2, r4
 8004470:	462b      	mov	r3, r5
 8004472:	f7fc f865 	bl	8000540 <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	2000      	movs	r0, #0
 800447c:	4950      	ldr	r1, [pc, #320]	; (80045c0 <__ieee754_pow+0x3c0>)
 800447e:	f7fb fea7 	bl	80001d0 <__aeabi_dsub>
 8004482:	4622      	mov	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	4680      	mov	r8, r0
 8004488:	4689      	mov	r9, r1
 800448a:	4620      	mov	r0, r4
 800448c:	4629      	mov	r1, r5
 800448e:	f7fc f857 	bl	8000540 <__aeabi_dmul>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4640      	mov	r0, r8
 8004498:	4649      	mov	r1, r9
 800449a:	f7fc f851 	bl	8000540 <__aeabi_dmul>
 800449e:	a340      	add	r3, pc, #256	; (adr r3, 80045a0 <__ieee754_pow+0x3a0>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc f84c 	bl	8000540 <__aeabi_dmul>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044b0:	f7fb fe8e 	bl	80001d0 <__aeabi_dsub>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4604      	mov	r4, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	4630      	mov	r0, r6
 80044be:	4639      	mov	r1, r7
 80044c0:	f7fb fe88 	bl	80001d4 <__adddf3>
 80044c4:	2000      	movs	r0, #0
 80044c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044ca:	4632      	mov	r2, r6
 80044cc:	463b      	mov	r3, r7
 80044ce:	f7fb fe7f 	bl	80001d0 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fb fe79 	bl	80001d0 <__aeabi_dsub>
 80044de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80044e4:	4313      	orrs	r3, r2
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	f040 81eb 	bne.w	80048c4 <__ieee754_pow+0x6c4>
 80044ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80045a8 <__ieee754_pow+0x3a8>
 80044f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80044f6:	2400      	movs	r4, #0
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004500:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004504:	f7fb fe64 	bl	80001d0 <__aeabi_dsub>
 8004508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800450c:	f7fc f818 	bl	8000540 <__aeabi_dmul>
 8004510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004514:	4680      	mov	r8, r0
 8004516:	4689      	mov	r9, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fc f810 	bl	8000540 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fb fe54 	bl	80001d4 <__adddf3>
 800452c:	4622      	mov	r2, r4
 800452e:	462b      	mov	r3, r5
 8004530:	4680      	mov	r8, r0
 8004532:	4689      	mov	r9, r1
 8004534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004538:	f7fc f802 	bl	8000540 <__aeabi_dmul>
 800453c:	460b      	mov	r3, r1
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4602      	mov	r2, r0
 8004544:	4649      	mov	r1, r9
 8004546:	4640      	mov	r0, r8
 8004548:	e9cd 4500 	strd	r4, r5, [sp]
 800454c:	f7fb fe42 	bl	80001d4 <__adddf3>
 8004550:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <__ieee754_pow+0x3c4>)
 8004552:	4299      	cmp	r1, r3
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	468b      	mov	fp, r1
 800455a:	f340 82f7 	ble.w	8004b4c <__ieee754_pow+0x94c>
 800455e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004566:	4303      	orrs	r3, r0
 8004568:	f000 81ea 	beq.w	8004940 <__ieee754_pow+0x740>
 800456c:	a310      	add	r3, pc, #64	; (adr r3, 80045b0 <__ieee754_pow+0x3b0>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004576:	f7fb ffe3 	bl	8000540 <__aeabi_dmul>
 800457a:	a30d      	add	r3, pc, #52	; (adr r3, 80045b0 <__ieee754_pow+0x3b0>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e6d5      	b.n	800432e <__ieee754_pow+0x12e>
 8004582:	bf00      	nop
 8004584:	f3af 8000 	nop.w
 8004588:	60000000 	.word	0x60000000
 800458c:	3ff71547 	.word	0x3ff71547
 8004590:	f85ddf44 	.word	0xf85ddf44
 8004594:	3e54ae0b 	.word	0x3e54ae0b
 8004598:	55555555 	.word	0x55555555
 800459c:	3fd55555 	.word	0x3fd55555
 80045a0:	652b82fe 	.word	0x652b82fe
 80045a4:	3ff71547 	.word	0x3ff71547
 80045a8:	00000000 	.word	0x00000000
 80045ac:	bff00000 	.word	0xbff00000
 80045b0:	8800759c 	.word	0x8800759c
 80045b4:	7e37e43c 	.word	0x7e37e43c
 80045b8:	3ff00000 	.word	0x3ff00000
 80045bc:	3fd00000 	.word	0x3fd00000
 80045c0:	3fe00000 	.word	0x3fe00000
 80045c4:	408fffff 	.word	0x408fffff
 80045c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	da05      	bge.n	80045de <__ieee754_pow+0x3de>
 80045d2:	4bd3      	ldr	r3, [pc, #844]	; (8004920 <__ieee754_pow+0x720>)
 80045d4:	f7fb ffb4 	bl	8000540 <__aeabi_dmul>
 80045d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80045dc:	460c      	mov	r4, r1
 80045de:	1523      	asrs	r3, r4, #20
 80045e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80045e4:	4413      	add	r3, r2
 80045e6:	9309      	str	r3, [sp, #36]	; 0x24
 80045e8:	4bce      	ldr	r3, [pc, #824]	; (8004924 <__ieee754_pow+0x724>)
 80045ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80045ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80045f2:	429c      	cmp	r4, r3
 80045f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80045f8:	dd08      	ble.n	800460c <__ieee754_pow+0x40c>
 80045fa:	4bcb      	ldr	r3, [pc, #812]	; (8004928 <__ieee754_pow+0x728>)
 80045fc:	429c      	cmp	r4, r3
 80045fe:	f340 815e 	ble.w	80048be <__ieee754_pow+0x6be>
 8004602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004604:	3301      	adds	r3, #1
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
 8004608:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800460c:	f04f 0a00 	mov.w	sl, #0
 8004610:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004614:	930c      	str	r3, [sp, #48]	; 0x30
 8004616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004618:	4bc4      	ldr	r3, [pc, #784]	; (800492c <__ieee754_pow+0x72c>)
 800461a:	4413      	add	r3, r2
 800461c:	ed93 7b00 	vldr	d7, [r3]
 8004620:	4629      	mov	r1, r5
 8004622:	ec53 2b17 	vmov	r2, r3, d7
 8004626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800462a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800462e:	f7fb fdcf 	bl	80001d0 <__aeabi_dsub>
 8004632:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004636:	4606      	mov	r6, r0
 8004638:	460f      	mov	r7, r1
 800463a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800463e:	f7fb fdc9 	bl	80001d4 <__adddf3>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	2000      	movs	r0, #0
 8004648:	49b9      	ldr	r1, [pc, #740]	; (8004930 <__ieee754_pow+0x730>)
 800464a:	f7fc f8a3 	bl	8000794 <__aeabi_ddiv>
 800464e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4630      	mov	r0, r6
 8004658:	4639      	mov	r1, r7
 800465a:	f7fb ff71 	bl	8000540 <__aeabi_dmul>
 800465e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004662:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800466a:	2300      	movs	r3, #0
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004672:	106d      	asrs	r5, r5, #1
 8004674:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004678:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800467c:	2200      	movs	r2, #0
 800467e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004682:	4640      	mov	r0, r8
 8004684:	4649      	mov	r1, r9
 8004686:	4614      	mov	r4, r2
 8004688:	461d      	mov	r5, r3
 800468a:	f7fb ff59 	bl	8000540 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4630      	mov	r0, r6
 8004694:	4639      	mov	r1, r7
 8004696:	f7fb fd9b 	bl	80001d0 <__aeabi_dsub>
 800469a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800469e:	4606      	mov	r6, r0
 80046a0:	460f      	mov	r7, r1
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb fd93 	bl	80001d0 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046b2:	f7fb fd8d 	bl	80001d0 <__aeabi_dsub>
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	f7fb ff41 	bl	8000540 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4630      	mov	r0, r6
 80046c4:	4639      	mov	r1, r7
 80046c6:	f7fb fd83 	bl	80001d0 <__aeabi_dsub>
 80046ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80046ce:	f7fb ff37 	bl	8000540 <__aeabi_dmul>
 80046d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	f7fb ff2f 	bl	8000540 <__aeabi_dmul>
 80046e2:	a37b      	add	r3, pc, #492	; (adr r3, 80048d0 <__ieee754_pow+0x6d0>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	4604      	mov	r4, r0
 80046ea:	460d      	mov	r5, r1
 80046ec:	f7fb ff28 	bl	8000540 <__aeabi_dmul>
 80046f0:	a379      	add	r3, pc, #484	; (adr r3, 80048d8 <__ieee754_pow+0x6d8>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb fd6d 	bl	80001d4 <__adddf3>
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	f7fb ff1f 	bl	8000540 <__aeabi_dmul>
 8004702:	a377      	add	r3, pc, #476	; (adr r3, 80048e0 <__ieee754_pow+0x6e0>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fd64 	bl	80001d4 <__adddf3>
 800470c:	4622      	mov	r2, r4
 800470e:	462b      	mov	r3, r5
 8004710:	f7fb ff16 	bl	8000540 <__aeabi_dmul>
 8004714:	a374      	add	r3, pc, #464	; (adr r3, 80048e8 <__ieee754_pow+0x6e8>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb fd5b 	bl	80001d4 <__adddf3>
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	f7fb ff0d 	bl	8000540 <__aeabi_dmul>
 8004726:	a372      	add	r3, pc, #456	; (adr r3, 80048f0 <__ieee754_pow+0x6f0>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb fd52 	bl	80001d4 <__adddf3>
 8004730:	4622      	mov	r2, r4
 8004732:	462b      	mov	r3, r5
 8004734:	f7fb ff04 	bl	8000540 <__aeabi_dmul>
 8004738:	a36f      	add	r3, pc, #444	; (adr r3, 80048f8 <__ieee754_pow+0x6f8>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd49 	bl	80001d4 <__adddf3>
 8004742:	4622      	mov	r2, r4
 8004744:	4606      	mov	r6, r0
 8004746:	460f      	mov	r7, r1
 8004748:	462b      	mov	r3, r5
 800474a:	4620      	mov	r0, r4
 800474c:	4629      	mov	r1, r5
 800474e:	f7fb fef7 	bl	8000540 <__aeabi_dmul>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4630      	mov	r0, r6
 8004758:	4639      	mov	r1, r7
 800475a:	f7fb fef1 	bl	8000540 <__aeabi_dmul>
 800475e:	4642      	mov	r2, r8
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
 8004764:	464b      	mov	r3, r9
 8004766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800476a:	f7fb fd33 	bl	80001d4 <__adddf3>
 800476e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004772:	f7fb fee5 	bl	8000540 <__aeabi_dmul>
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f7fb fd2b 	bl	80001d4 <__adddf3>
 800477e:	4642      	mov	r2, r8
 8004780:	4606      	mov	r6, r0
 8004782:	460f      	mov	r7, r1
 8004784:	464b      	mov	r3, r9
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f7fb fed9 	bl	8000540 <__aeabi_dmul>
 800478e:	2200      	movs	r2, #0
 8004790:	4b68      	ldr	r3, [pc, #416]	; (8004934 <__ieee754_pow+0x734>)
 8004792:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004796:	f7fb fd1d 	bl	80001d4 <__adddf3>
 800479a:	4632      	mov	r2, r6
 800479c:	463b      	mov	r3, r7
 800479e:	f7fb fd19 	bl	80001d4 <__adddf3>
 80047a2:	9802      	ldr	r0, [sp, #8]
 80047a4:	460d      	mov	r5, r1
 80047a6:	4604      	mov	r4, r0
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fec6 	bl	8000540 <__aeabi_dmul>
 80047b4:	2200      	movs	r2, #0
 80047b6:	4680      	mov	r8, r0
 80047b8:	4689      	mov	r9, r1
 80047ba:	4b5e      	ldr	r3, [pc, #376]	; (8004934 <__ieee754_pow+0x734>)
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	f7fb fd06 	bl	80001d0 <__aeabi_dsub>
 80047c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047c8:	f7fb fd02 	bl	80001d0 <__aeabi_dsub>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4630      	mov	r0, r6
 80047d2:	4639      	mov	r1, r7
 80047d4:	f7fb fcfc 	bl	80001d0 <__aeabi_dsub>
 80047d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047dc:	f7fb feb0 	bl	8000540 <__aeabi_dmul>
 80047e0:	4622      	mov	r2, r4
 80047e2:	4606      	mov	r6, r0
 80047e4:	460f      	mov	r7, r1
 80047e6:	462b      	mov	r3, r5
 80047e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ec:	f7fb fea8 	bl	8000540 <__aeabi_dmul>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fb fcec 	bl	80001d4 <__adddf3>
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4640      	mov	r0, r8
 8004806:	4649      	mov	r1, r9
 8004808:	f7fb fce4 	bl	80001d4 <__adddf3>
 800480c:	9802      	ldr	r0, [sp, #8]
 800480e:	a33c      	add	r3, pc, #240	; (adr r3, 8004900 <__ieee754_pow+0x700>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	4604      	mov	r4, r0
 8004816:	460d      	mov	r5, r1
 8004818:	f7fb fe92 	bl	8000540 <__aeabi_dmul>
 800481c:	4642      	mov	r2, r8
 800481e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004822:	464b      	mov	r3, r9
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fcd2 	bl	80001d0 <__aeabi_dsub>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4630      	mov	r0, r6
 8004832:	4639      	mov	r1, r7
 8004834:	f7fb fccc 	bl	80001d0 <__aeabi_dsub>
 8004838:	a333      	add	r3, pc, #204	; (adr r3, 8004908 <__ieee754_pow+0x708>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fe7f 	bl	8000540 <__aeabi_dmul>
 8004842:	a333      	add	r3, pc, #204	; (adr r3, 8004910 <__ieee754_pow+0x710>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fb fe76 	bl	8000540 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fcba 	bl	80001d4 <__adddf3>
 8004860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <__ieee754_pow+0x738>)
 8004864:	4413      	add	r3, r2
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fcb3 	bl	80001d4 <__adddf3>
 800486e:	4604      	mov	r4, r0
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	460d      	mov	r5, r1
 8004874:	f7fb fdfa 	bl	800046c <__aeabi_i2d>
 8004878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <__ieee754_pow+0x73c>)
 800487c:	4413      	add	r3, r2
 800487e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004882:	4606      	mov	r6, r0
 8004884:	460f      	mov	r7, r1
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800488e:	f7fb fca1 	bl	80001d4 <__adddf3>
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	f7fb fc9d 	bl	80001d4 <__adddf3>
 800489a:	4632      	mov	r2, r6
 800489c:	463b      	mov	r3, r7
 800489e:	f7fb fc99 	bl	80001d4 <__adddf3>
 80048a2:	9802      	ldr	r0, [sp, #8]
 80048a4:	4632      	mov	r2, r6
 80048a6:	463b      	mov	r3, r7
 80048a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ac:	f7fb fc90 	bl	80001d0 <__aeabi_dsub>
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	f7fb fc8c 	bl	80001d0 <__aeabi_dsub>
 80048b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048bc:	e607      	b.n	80044ce <__ieee754_pow+0x2ce>
 80048be:	f04f 0a01 	mov.w	sl, #1
 80048c2:	e6a5      	b.n	8004610 <__ieee754_pow+0x410>
 80048c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004918 <__ieee754_pow+0x718>
 80048c8:	e613      	b.n	80044f2 <__ieee754_pow+0x2f2>
 80048ca:	bf00      	nop
 80048cc:	f3af 8000 	nop.w
 80048d0:	4a454eef 	.word	0x4a454eef
 80048d4:	3fca7e28 	.word	0x3fca7e28
 80048d8:	93c9db65 	.word	0x93c9db65
 80048dc:	3fcd864a 	.word	0x3fcd864a
 80048e0:	a91d4101 	.word	0xa91d4101
 80048e4:	3fd17460 	.word	0x3fd17460
 80048e8:	518f264d 	.word	0x518f264d
 80048ec:	3fd55555 	.word	0x3fd55555
 80048f0:	db6fabff 	.word	0xdb6fabff
 80048f4:	3fdb6db6 	.word	0x3fdb6db6
 80048f8:	33333303 	.word	0x33333303
 80048fc:	3fe33333 	.word	0x3fe33333
 8004900:	e0000000 	.word	0xe0000000
 8004904:	3feec709 	.word	0x3feec709
 8004908:	dc3a03fd 	.word	0xdc3a03fd
 800490c:	3feec709 	.word	0x3feec709
 8004910:	145b01f5 	.word	0x145b01f5
 8004914:	be3e2fe0 	.word	0xbe3e2fe0
 8004918:	00000000 	.word	0x00000000
 800491c:	3ff00000 	.word	0x3ff00000
 8004920:	43400000 	.word	0x43400000
 8004924:	0003988e 	.word	0x0003988e
 8004928:	000bb679 	.word	0x000bb679
 800492c:	08005348 	.word	0x08005348
 8004930:	3ff00000 	.word	0x3ff00000
 8004934:	40080000 	.word	0x40080000
 8004938:	08005368 	.word	0x08005368
 800493c:	08005358 	.word	0x08005358
 8004940:	a3b4      	add	r3, pc, #720	; (adr r3, 8004c14 <__ieee754_pow+0xa14>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	f7fb fc43 	bl	80001d4 <__adddf3>
 800494e:	4622      	mov	r2, r4
 8004950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004954:	462b      	mov	r3, r5
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fb fc39 	bl	80001d0 <__aeabi_dsub>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004966:	f7fc f87b 	bl	8000a60 <__aeabi_dcmpgt>
 800496a:	2800      	cmp	r0, #0
 800496c:	f47f adfe 	bne.w	800456c <__ieee754_pow+0x36c>
 8004970:	4aa3      	ldr	r2, [pc, #652]	; (8004c00 <__ieee754_pow+0xa00>)
 8004972:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004976:	4293      	cmp	r3, r2
 8004978:	f340 810a 	ble.w	8004b90 <__ieee754_pow+0x990>
 800497c:	151b      	asrs	r3, r3, #20
 800497e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004982:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004986:	fa4a f303 	asr.w	r3, sl, r3
 800498a:	445b      	add	r3, fp
 800498c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004990:	4e9c      	ldr	r6, [pc, #624]	; (8004c04 <__ieee754_pow+0xa04>)
 8004992:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004996:	4116      	asrs	r6, r2
 8004998:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800499c:	2000      	movs	r0, #0
 800499e:	ea23 0106 	bic.w	r1, r3, r6
 80049a2:	f1c2 0214 	rsb	r2, r2, #20
 80049a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80049aa:	fa4a fa02 	asr.w	sl, sl, r2
 80049ae:	f1bb 0f00 	cmp.w	fp, #0
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	bfb8      	it	lt
 80049bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80049c0:	f7fb fc06 	bl	80001d0 <__aeabi_dsub>
 80049c4:	e9cd 0100 	strd	r0, r1, [sp]
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049d0:	f7fb fc00 	bl	80001d4 <__adddf3>
 80049d4:	2000      	movs	r0, #0
 80049d6:	a378      	add	r3, pc, #480	; (adr r3, 8004bb8 <__ieee754_pow+0x9b8>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4604      	mov	r4, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	f7fb fdae 	bl	8000540 <__aeabi_dmul>
 80049e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049e8:	4606      	mov	r6, r0
 80049ea:	460f      	mov	r7, r1
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fbee 	bl	80001d0 <__aeabi_dsub>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4640      	mov	r0, r8
 80049fa:	4649      	mov	r1, r9
 80049fc:	f7fb fbe8 	bl	80001d0 <__aeabi_dsub>
 8004a00:	a36f      	add	r3, pc, #444	; (adr r3, 8004bc0 <__ieee754_pow+0x9c0>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fd9b 	bl	8000540 <__aeabi_dmul>
 8004a0a:	a36f      	add	r3, pc, #444	; (adr r3, 8004bc8 <__ieee754_pow+0x9c8>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	4680      	mov	r8, r0
 8004a12:	4689      	mov	r9, r1
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fd92 	bl	8000540 <__aeabi_dmul>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4640      	mov	r0, r8
 8004a22:	4649      	mov	r1, r9
 8004a24:	f7fb fbd6 	bl	80001d4 <__adddf3>
 8004a28:	4604      	mov	r4, r0
 8004a2a:	460d      	mov	r5, r1
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fbce 	bl	80001d4 <__adddf3>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	4689      	mov	r9, r1
 8004a40:	f7fb fbc6 	bl	80001d0 <__aeabi_dsub>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4620      	mov	r0, r4
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	f7fb fbc0 	bl	80001d0 <__aeabi_dsub>
 8004a50:	4642      	mov	r2, r8
 8004a52:	4606      	mov	r6, r0
 8004a54:	460f      	mov	r7, r1
 8004a56:	464b      	mov	r3, r9
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fb fd70 	bl	8000540 <__aeabi_dmul>
 8004a60:	a35b      	add	r3, pc, #364	; (adr r3, 8004bd0 <__ieee754_pow+0x9d0>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	4604      	mov	r4, r0
 8004a68:	460d      	mov	r5, r1
 8004a6a:	f7fb fd69 	bl	8000540 <__aeabi_dmul>
 8004a6e:	a35a      	add	r3, pc, #360	; (adr r3, 8004bd8 <__ieee754_pow+0x9d8>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fbac 	bl	80001d0 <__aeabi_dsub>
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	f7fb fd60 	bl	8000540 <__aeabi_dmul>
 8004a80:	a357      	add	r3, pc, #348	; (adr r3, 8004be0 <__ieee754_pow+0x9e0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fba5 	bl	80001d4 <__adddf3>
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f7fb fd57 	bl	8000540 <__aeabi_dmul>
 8004a92:	a355      	add	r3, pc, #340	; (adr r3, 8004be8 <__ieee754_pow+0x9e8>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fb9a 	bl	80001d0 <__aeabi_dsub>
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	f7fb fd4e 	bl	8000540 <__aeabi_dmul>
 8004aa4:	a352      	add	r3, pc, #328	; (adr r3, 8004bf0 <__ieee754_pow+0x9f0>)
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f7fb fb93 	bl	80001d4 <__adddf3>
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	f7fb fd45 	bl	8000540 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f7fb fb87 	bl	80001d0 <__aeabi_dsub>
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	460d      	mov	r5, r1
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f7fb fd37 	bl	8000540 <__aeabi_dmul>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb fb76 	bl	80001d0 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004aec:	f7fb fe52 	bl	8000794 <__aeabi_ddiv>
 8004af0:	4632      	mov	r2, r6
 8004af2:	4604      	mov	r4, r0
 8004af4:	460d      	mov	r5, r1
 8004af6:	463b      	mov	r3, r7
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fd20 	bl	8000540 <__aeabi_dmul>
 8004b00:	4632      	mov	r2, r6
 8004b02:	463b      	mov	r3, r7
 8004b04:	f7fb fb66 	bl	80001d4 <__adddf3>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb fb5e 	bl	80001d0 <__aeabi_dsub>
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	f7fb fb5a 	bl	80001d0 <__aeabi_dsub>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	2000      	movs	r0, #0
 8004b22:	4939      	ldr	r1, [pc, #228]	; (8004c08 <__ieee754_pow+0xa08>)
 8004b24:	f7fb fb54 	bl	80001d0 <__aeabi_dsub>
 8004b28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004b2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	da2f      	bge.n	8004b96 <__ieee754_pow+0x996>
 8004b36:	4650      	mov	r0, sl
 8004b38:	ec43 2b10 	vmov	d0, r2, r3
 8004b3c:	f000 fb60 	bl	8005200 <scalbn>
 8004b40:	ec51 0b10 	vmov	r0, r1, d0
 8004b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b48:	f7ff bbf1 	b.w	800432e <__ieee754_pow+0x12e>
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <__ieee754_pow+0xa0c>)
 8004b4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b52:	429e      	cmp	r6, r3
 8004b54:	f77f af0c 	ble.w	8004970 <__ieee754_pow+0x770>
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <__ieee754_pow+0xa10>)
 8004b5a:	440b      	add	r3, r1
 8004b5c:	4303      	orrs	r3, r0
 8004b5e:	d00b      	beq.n	8004b78 <__ieee754_pow+0x978>
 8004b60:	a325      	add	r3, pc, #148	; (adr r3, 8004bf8 <__ieee754_pow+0x9f8>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b6a:	f7fb fce9 	bl	8000540 <__aeabi_dmul>
 8004b6e:	a322      	add	r3, pc, #136	; (adr r3, 8004bf8 <__ieee754_pow+0x9f8>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7ff bbdb 	b.w	800432e <__ieee754_pow+0x12e>
 8004b78:	4622      	mov	r2, r4
 8004b7a:	462b      	mov	r3, r5
 8004b7c:	f7fb fb28 	bl	80001d0 <__aeabi_dsub>
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	f7fb ff62 	bl	8000a4c <__aeabi_dcmpge>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f43f aef1 	beq.w	8004970 <__ieee754_pow+0x770>
 8004b8e:	e7e7      	b.n	8004b60 <__ieee754_pow+0x960>
 8004b90:	f04f 0a00 	mov.w	sl, #0
 8004b94:	e718      	b.n	80049c8 <__ieee754_pow+0x7c8>
 8004b96:	4621      	mov	r1, r4
 8004b98:	e7d4      	b.n	8004b44 <__ieee754_pow+0x944>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	491a      	ldr	r1, [pc, #104]	; (8004c08 <__ieee754_pow+0xa08>)
 8004b9e:	f7ff bb8f 	b.w	80042c0 <__ieee754_pow+0xc0>
 8004ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ba6:	f7ff bb8b 	b.w	80042c0 <__ieee754_pow+0xc0>
 8004baa:	4630      	mov	r0, r6
 8004bac:	4639      	mov	r1, r7
 8004bae:	f7ff bb87 	b.w	80042c0 <__ieee754_pow+0xc0>
 8004bb2:	4693      	mov	fp, r2
 8004bb4:	f7ff bb98 	b.w	80042e8 <__ieee754_pow+0xe8>
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	3fe62e43 	.word	0x3fe62e43
 8004bc0:	fefa39ef 	.word	0xfefa39ef
 8004bc4:	3fe62e42 	.word	0x3fe62e42
 8004bc8:	0ca86c39 	.word	0x0ca86c39
 8004bcc:	be205c61 	.word	0xbe205c61
 8004bd0:	72bea4d0 	.word	0x72bea4d0
 8004bd4:	3e663769 	.word	0x3e663769
 8004bd8:	c5d26bf1 	.word	0xc5d26bf1
 8004bdc:	3ebbbd41 	.word	0x3ebbbd41
 8004be0:	af25de2c 	.word	0xaf25de2c
 8004be4:	3f11566a 	.word	0x3f11566a
 8004be8:	16bebd93 	.word	0x16bebd93
 8004bec:	3f66c16c 	.word	0x3f66c16c
 8004bf0:	5555553e 	.word	0x5555553e
 8004bf4:	3fc55555 	.word	0x3fc55555
 8004bf8:	c2f8f359 	.word	0xc2f8f359
 8004bfc:	01a56e1f 	.word	0x01a56e1f
 8004c00:	3fe00000 	.word	0x3fe00000
 8004c04:	000fffff 	.word	0x000fffff
 8004c08:	3ff00000 	.word	0x3ff00000
 8004c0c:	4090cbff 	.word	0x4090cbff
 8004c10:	3f6f3400 	.word	0x3f6f3400
 8004c14:	652b82fe 	.word	0x652b82fe
 8004c18:	3c971547 	.word	0x3c971547

08004c1c <__ieee754_sqrt>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	4955      	ldr	r1, [pc, #340]	; (8004d78 <__ieee754_sqrt+0x15c>)
 8004c22:	ec55 4b10 	vmov	r4, r5, d0
 8004c26:	43a9      	bics	r1, r5
 8004c28:	462b      	mov	r3, r5
 8004c2a:	462a      	mov	r2, r5
 8004c2c:	d112      	bne.n	8004c54 <__ieee754_sqrt+0x38>
 8004c2e:	ee10 2a10 	vmov	r2, s0
 8004c32:	ee10 0a10 	vmov	r0, s0
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb fc82 	bl	8000540 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7fb fac6 	bl	80001d4 <__adddf3>
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	ec45 4b10 	vmov	d0, r4, r5
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	ee10 0a10 	vmov	r0, s0
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	dc0f      	bgt.n	8004c7e <__ieee754_sqrt+0x62>
 8004c5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004c62:	4330      	orrs	r0, r6
 8004c64:	d0f2      	beq.n	8004c4c <__ieee754_sqrt+0x30>
 8004c66:	b155      	cbz	r5, 8004c7e <__ieee754_sqrt+0x62>
 8004c68:	ee10 2a10 	vmov	r2, s0
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb faae 	bl	80001d0 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	f7fb fd8c 	bl	8000794 <__aeabi_ddiv>
 8004c7c:	e7e4      	b.n	8004c48 <__ieee754_sqrt+0x2c>
 8004c7e:	151b      	asrs	r3, r3, #20
 8004c80:	d073      	beq.n	8004d6a <__ieee754_sqrt+0x14e>
 8004c82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c86:	07dd      	lsls	r5, r3, #31
 8004c88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004c8c:	bf48      	it	mi
 8004c8e:	0fc8      	lsrmi	r0, r1, #31
 8004c90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c94:	bf44      	itt	mi
 8004c96:	0049      	lslmi	r1, r1, #1
 8004c98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	1058      	asrs	r0, r3, #1
 8004ca0:	0fcb      	lsrs	r3, r1, #31
 8004ca2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004ca6:	0049      	lsls	r1, r1, #1
 8004ca8:	2316      	movs	r3, #22
 8004caa:	462c      	mov	r4, r5
 8004cac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004cb0:	19a7      	adds	r7, r4, r6
 8004cb2:	4297      	cmp	r7, r2
 8004cb4:	bfde      	ittt	le
 8004cb6:	19bc      	addle	r4, r7, r6
 8004cb8:	1bd2      	suble	r2, r2, r7
 8004cba:	19ad      	addle	r5, r5, r6
 8004cbc:	0fcf      	lsrs	r7, r1, #31
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004cc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004cc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004ccc:	d1f0      	bne.n	8004cb0 <__ieee754_sqrt+0x94>
 8004cce:	f04f 0c20 	mov.w	ip, #32
 8004cd2:	469e      	mov	lr, r3
 8004cd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004cd8:	42a2      	cmp	r2, r4
 8004cda:	eb06 070e 	add.w	r7, r6, lr
 8004cde:	dc02      	bgt.n	8004ce6 <__ieee754_sqrt+0xca>
 8004ce0:	d112      	bne.n	8004d08 <__ieee754_sqrt+0xec>
 8004ce2:	428f      	cmp	r7, r1
 8004ce4:	d810      	bhi.n	8004d08 <__ieee754_sqrt+0xec>
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	eb07 0e06 	add.w	lr, r7, r6
 8004cec:	da42      	bge.n	8004d74 <__ieee754_sqrt+0x158>
 8004cee:	f1be 0f00 	cmp.w	lr, #0
 8004cf2:	db3f      	blt.n	8004d74 <__ieee754_sqrt+0x158>
 8004cf4:	f104 0801 	add.w	r8, r4, #1
 8004cf8:	1b12      	subs	r2, r2, r4
 8004cfa:	428f      	cmp	r7, r1
 8004cfc:	bf88      	it	hi
 8004cfe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004d02:	1bc9      	subs	r1, r1, r7
 8004d04:	4433      	add	r3, r6
 8004d06:	4644      	mov	r4, r8
 8004d08:	0052      	lsls	r2, r2, #1
 8004d0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004d0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004d12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d1a:	d1dd      	bne.n	8004cd8 <__ieee754_sqrt+0xbc>
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	d006      	beq.n	8004d2e <__ieee754_sqrt+0x112>
 8004d20:	1c5c      	adds	r4, r3, #1
 8004d22:	bf13      	iteet	ne
 8004d24:	3301      	addne	r3, #1
 8004d26:	3501      	addeq	r5, #1
 8004d28:	4663      	moveq	r3, ip
 8004d2a:	f023 0301 	bicne.w	r3, r3, #1
 8004d2e:	106a      	asrs	r2, r5, #1
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	07e9      	lsls	r1, r5, #31
 8004d34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004d38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004d3c:	bf48      	it	mi
 8004d3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004d46:	461c      	mov	r4, r3
 8004d48:	e780      	b.n	8004c4c <__ieee754_sqrt+0x30>
 8004d4a:	0aca      	lsrs	r2, r1, #11
 8004d4c:	3815      	subs	r0, #21
 8004d4e:	0549      	lsls	r1, r1, #21
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d0fa      	beq.n	8004d4a <__ieee754_sqrt+0x12e>
 8004d54:	02d6      	lsls	r6, r2, #11
 8004d56:	d50a      	bpl.n	8004d6e <__ieee754_sqrt+0x152>
 8004d58:	f1c3 0420 	rsb	r4, r3, #32
 8004d5c:	fa21 f404 	lsr.w	r4, r1, r4
 8004d60:	1e5d      	subs	r5, r3, #1
 8004d62:	4099      	lsls	r1, r3
 8004d64:	4322      	orrs	r2, r4
 8004d66:	1b43      	subs	r3, r0, r5
 8004d68:	e78b      	b.n	8004c82 <__ieee754_sqrt+0x66>
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	e7f0      	b.n	8004d50 <__ieee754_sqrt+0x134>
 8004d6e:	0052      	lsls	r2, r2, #1
 8004d70:	3301      	adds	r3, #1
 8004d72:	e7ef      	b.n	8004d54 <__ieee754_sqrt+0x138>
 8004d74:	46a0      	mov	r8, r4
 8004d76:	e7bf      	b.n	8004cf8 <__ieee754_sqrt+0xdc>
 8004d78:	7ff00000 	.word	0x7ff00000
 8004d7c:	00000000 	.word	0x00000000

08004d80 <atan>:
 8004d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	ec55 4b10 	vmov	r4, r5, d0
 8004d88:	4bc3      	ldr	r3, [pc, #780]	; (8005098 <atan+0x318>)
 8004d8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d8e:	429e      	cmp	r6, r3
 8004d90:	46ab      	mov	fp, r5
 8004d92:	dd18      	ble.n	8004dc6 <atan+0x46>
 8004d94:	4bc1      	ldr	r3, [pc, #772]	; (800509c <atan+0x31c>)
 8004d96:	429e      	cmp	r6, r3
 8004d98:	dc01      	bgt.n	8004d9e <atan+0x1e>
 8004d9a:	d109      	bne.n	8004db0 <atan+0x30>
 8004d9c:	b144      	cbz	r4, 8004db0 <atan+0x30>
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fa15 	bl	80001d4 <__adddf3>
 8004daa:	4604      	mov	r4, r0
 8004dac:	460d      	mov	r5, r1
 8004dae:	e006      	b.n	8004dbe <atan+0x3e>
 8004db0:	f1bb 0f00 	cmp.w	fp, #0
 8004db4:	f340 8131 	ble.w	800501a <atan+0x29a>
 8004db8:	a59b      	add	r5, pc, #620	; (adr r5, 8005028 <atan+0x2a8>)
 8004dba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dbe:	ec45 4b10 	vmov	d0, r4, r5
 8004dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc6:	4bb6      	ldr	r3, [pc, #728]	; (80050a0 <atan+0x320>)
 8004dc8:	429e      	cmp	r6, r3
 8004dca:	dc14      	bgt.n	8004df6 <atan+0x76>
 8004dcc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004dd0:	429e      	cmp	r6, r3
 8004dd2:	dc0d      	bgt.n	8004df0 <atan+0x70>
 8004dd4:	a396      	add	r3, pc, #600	; (adr r3, 8005030 <atan+0x2b0>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	ee10 0a10 	vmov	r0, s0
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb f9f8 	bl	80001d4 <__adddf3>
 8004de4:	2200      	movs	r2, #0
 8004de6:	4baf      	ldr	r3, [pc, #700]	; (80050a4 <atan+0x324>)
 8004de8:	f7fb fe3a 	bl	8000a60 <__aeabi_dcmpgt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1e6      	bne.n	8004dbe <atan+0x3e>
 8004df0:	f04f 3aff 	mov.w	sl, #4294967295
 8004df4:	e02b      	b.n	8004e4e <atan+0xce>
 8004df6:	f000 f963 	bl	80050c0 <fabs>
 8004dfa:	4bab      	ldr	r3, [pc, #684]	; (80050a8 <atan+0x328>)
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	ec55 4b10 	vmov	r4, r5, d0
 8004e02:	f300 80bf 	bgt.w	8004f84 <atan+0x204>
 8004e06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004e0a:	429e      	cmp	r6, r3
 8004e0c:	f300 80a0 	bgt.w	8004f50 <atan+0x1d0>
 8004e10:	ee10 2a10 	vmov	r2, s0
 8004e14:	ee10 0a10 	vmov	r0, s0
 8004e18:	462b      	mov	r3, r5
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f7fb f9da 	bl	80001d4 <__adddf3>
 8004e20:	2200      	movs	r2, #0
 8004e22:	4ba0      	ldr	r3, [pc, #640]	; (80050a4 <atan+0x324>)
 8004e24:	f7fb f9d4 	bl	80001d0 <__aeabi_dsub>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb f9cd 	bl	80001d4 <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb fca7 	bl	8000794 <__aeabi_ddiv>
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	462b      	mov	r3, r5
 8004e52:	4620      	mov	r0, r4
 8004e54:	4629      	mov	r1, r5
 8004e56:	f7fb fb73 	bl	8000540 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4680      	mov	r8, r0
 8004e60:	4689      	mov	r9, r1
 8004e62:	f7fb fb6d 	bl	8000540 <__aeabi_dmul>
 8004e66:	a374      	add	r3, pc, #464	; (adr r3, 8005038 <atan+0x2b8>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	f7fb fb66 	bl	8000540 <__aeabi_dmul>
 8004e74:	a372      	add	r3, pc, #456	; (adr r3, 8005040 <atan+0x2c0>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb f9ab 	bl	80001d4 <__adddf3>
 8004e7e:	4632      	mov	r2, r6
 8004e80:	463b      	mov	r3, r7
 8004e82:	f7fb fb5d 	bl	8000540 <__aeabi_dmul>
 8004e86:	a370      	add	r3, pc, #448	; (adr r3, 8005048 <atan+0x2c8>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f7fb f9a2 	bl	80001d4 <__adddf3>
 8004e90:	4632      	mov	r2, r6
 8004e92:	463b      	mov	r3, r7
 8004e94:	f7fb fb54 	bl	8000540 <__aeabi_dmul>
 8004e98:	a36d      	add	r3, pc, #436	; (adr r3, 8005050 <atan+0x2d0>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb f999 	bl	80001d4 <__adddf3>
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	f7fb fb4b 	bl	8000540 <__aeabi_dmul>
 8004eaa:	a36b      	add	r3, pc, #428	; (adr r3, 8005058 <atan+0x2d8>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f7fb f990 	bl	80001d4 <__adddf3>
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	f7fb fb42 	bl	8000540 <__aeabi_dmul>
 8004ebc:	a368      	add	r3, pc, #416	; (adr r3, 8005060 <atan+0x2e0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb f987 	bl	80001d4 <__adddf3>
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	464b      	mov	r3, r9
 8004eca:	f7fb fb39 	bl	8000540 <__aeabi_dmul>
 8004ece:	a366      	add	r3, pc, #408	; (adr r3, 8005068 <atan+0x2e8>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	f7fb fb30 	bl	8000540 <__aeabi_dmul>
 8004ee0:	a363      	add	r3, pc, #396	; (adr r3, 8005070 <atan+0x2f0>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb f973 	bl	80001d0 <__aeabi_dsub>
 8004eea:	4632      	mov	r2, r6
 8004eec:	463b      	mov	r3, r7
 8004eee:	f7fb fb27 	bl	8000540 <__aeabi_dmul>
 8004ef2:	a361      	add	r3, pc, #388	; (adr r3, 8005078 <atan+0x2f8>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f7fb f96a 	bl	80001d0 <__aeabi_dsub>
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	f7fb fb1e 	bl	8000540 <__aeabi_dmul>
 8004f04:	a35e      	add	r3, pc, #376	; (adr r3, 8005080 <atan+0x300>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb f961 	bl	80001d0 <__aeabi_dsub>
 8004f0e:	4632      	mov	r2, r6
 8004f10:	463b      	mov	r3, r7
 8004f12:	f7fb fb15 	bl	8000540 <__aeabi_dmul>
 8004f16:	a35c      	add	r3, pc, #368	; (adr r3, 8005088 <atan+0x308>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb f958 	bl	80001d0 <__aeabi_dsub>
 8004f20:	4632      	mov	r2, r6
 8004f22:	463b      	mov	r3, r7
 8004f24:	f7fb fb0c 	bl	8000540 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb f950 	bl	80001d4 <__adddf3>
 8004f34:	4622      	mov	r2, r4
 8004f36:	462b      	mov	r3, r5
 8004f38:	f7fb fb02 	bl	8000540 <__aeabi_dmul>
 8004f3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	d14b      	bne.n	8004fde <atan+0x25e>
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb f941 	bl	80001d0 <__aeabi_dsub>
 8004f4e:	e72c      	b.n	8004daa <atan+0x2a>
 8004f50:	ee10 0a10 	vmov	r0, s0
 8004f54:	2200      	movs	r2, #0
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <atan+0x324>)
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb f939 	bl	80001d0 <__aeabi_dsub>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <atan+0x324>)
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7fb f933 	bl	80001d4 <__adddf3>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb fc0d 	bl	8000794 <__aeabi_ddiv>
 8004f7a:	f04f 0a01 	mov.w	sl, #1
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	e764      	b.n	8004e4e <atan+0xce>
 8004f84:	4b49      	ldr	r3, [pc, #292]	; (80050ac <atan+0x32c>)
 8004f86:	429e      	cmp	r6, r3
 8004f88:	dc1d      	bgt.n	8004fc6 <atan+0x246>
 8004f8a:	ee10 0a10 	vmov	r0, s0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <atan+0x330>)
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb f91c 	bl	80001d0 <__aeabi_dsub>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <atan+0x330>)
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb facc 	bl	8000540 <__aeabi_dmul>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <atan+0x324>)
 8004fac:	f7fb f912 	bl	80001d4 <__adddf3>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb fbec 	bl	8000794 <__aeabi_ddiv>
 8004fbc:	f04f 0a02 	mov.w	sl, #2
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	e743      	b.n	8004e4e <atan+0xce>
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	ee10 2a10 	vmov	r2, s0
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4939      	ldr	r1, [pc, #228]	; (80050b4 <atan+0x334>)
 8004fd0:	f7fb fbe0 	bl	8000794 <__aeabi_ddiv>
 8004fd4:	f04f 0a03 	mov.w	sl, #3
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	e737      	b.n	8004e4e <atan+0xce>
 8004fde:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <atan+0x338>)
 8004fe0:	4e36      	ldr	r6, [pc, #216]	; (80050bc <atan+0x33c>)
 8004fe2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004fe6:	4456      	add	r6, sl
 8004fe8:	449a      	add	sl, r3
 8004fea:	e9da 2300 	ldrd	r2, r3, [sl]
 8004fee:	f7fb f8ef 	bl	80001d0 <__aeabi_dsub>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb f8eb 	bl	80001d0 <__aeabi_dsub>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005002:	f7fb f8e5 	bl	80001d0 <__aeabi_dsub>
 8005006:	f1bb 0f00 	cmp.w	fp, #0
 800500a:	4604      	mov	r4, r0
 800500c:	460d      	mov	r5, r1
 800500e:	f6bf aed6 	bge.w	8004dbe <atan+0x3e>
 8005012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005016:	461d      	mov	r5, r3
 8005018:	e6d1      	b.n	8004dbe <atan+0x3e>
 800501a:	a51d      	add	r5, pc, #116	; (adr r5, 8005090 <atan+0x310>)
 800501c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005020:	e6cd      	b.n	8004dbe <atan+0x3e>
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
 8005028:	54442d18 	.word	0x54442d18
 800502c:	3ff921fb 	.word	0x3ff921fb
 8005030:	8800759c 	.word	0x8800759c
 8005034:	7e37e43c 	.word	0x7e37e43c
 8005038:	e322da11 	.word	0xe322da11
 800503c:	3f90ad3a 	.word	0x3f90ad3a
 8005040:	24760deb 	.word	0x24760deb
 8005044:	3fa97b4b 	.word	0x3fa97b4b
 8005048:	a0d03d51 	.word	0xa0d03d51
 800504c:	3fb10d66 	.word	0x3fb10d66
 8005050:	c54c206e 	.word	0xc54c206e
 8005054:	3fb745cd 	.word	0x3fb745cd
 8005058:	920083ff 	.word	0x920083ff
 800505c:	3fc24924 	.word	0x3fc24924
 8005060:	5555550d 	.word	0x5555550d
 8005064:	3fd55555 	.word	0x3fd55555
 8005068:	2c6a6c2f 	.word	0x2c6a6c2f
 800506c:	bfa2b444 	.word	0xbfa2b444
 8005070:	52defd9a 	.word	0x52defd9a
 8005074:	3fadde2d 	.word	0x3fadde2d
 8005078:	af749a6d 	.word	0xaf749a6d
 800507c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005080:	fe231671 	.word	0xfe231671
 8005084:	3fbc71c6 	.word	0x3fbc71c6
 8005088:	9998ebc4 	.word	0x9998ebc4
 800508c:	3fc99999 	.word	0x3fc99999
 8005090:	54442d18 	.word	0x54442d18
 8005094:	bff921fb 	.word	0xbff921fb
 8005098:	440fffff 	.word	0x440fffff
 800509c:	7ff00000 	.word	0x7ff00000
 80050a0:	3fdbffff 	.word	0x3fdbffff
 80050a4:	3ff00000 	.word	0x3ff00000
 80050a8:	3ff2ffff 	.word	0x3ff2ffff
 80050ac:	40037fff 	.word	0x40037fff
 80050b0:	3ff80000 	.word	0x3ff80000
 80050b4:	bff00000 	.word	0xbff00000
 80050b8:	08005398 	.word	0x08005398
 80050bc:	08005378 	.word	0x08005378

080050c0 <fabs>:
 80050c0:	ec51 0b10 	vmov	r0, r1, d0
 80050c4:	ee10 2a10 	vmov	r2, s0
 80050c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050cc:	ec43 2b10 	vmov	d0, r2, r3
 80050d0:	4770      	bx	lr

080050d2 <finite>:
 80050d2:	ee10 3a90 	vmov	r3, s1
 80050d6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80050da:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80050de:	0fc0      	lsrs	r0, r0, #31
 80050e0:	4770      	bx	lr

080050e2 <matherr>:
 80050e2:	2000      	movs	r0, #0
 80050e4:	4770      	bx	lr
	...

080050e8 <nan>:
 80050e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80050f0 <nan+0x8>
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	00000000 	.word	0x00000000
 80050f4:	7ff80000 	.word	0x7ff80000

080050f8 <rint>:
 80050f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fa:	ec51 0b10 	vmov	r0, r1, d0
 80050fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005102:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005106:	2e13      	cmp	r6, #19
 8005108:	460b      	mov	r3, r1
 800510a:	ee10 4a10 	vmov	r4, s0
 800510e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005112:	dc56      	bgt.n	80051c2 <rint+0xca>
 8005114:	2e00      	cmp	r6, #0
 8005116:	da2b      	bge.n	8005170 <rint+0x78>
 8005118:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800511c:	4302      	orrs	r2, r0
 800511e:	d023      	beq.n	8005168 <rint+0x70>
 8005120:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005124:	4302      	orrs	r2, r0
 8005126:	4254      	negs	r4, r2
 8005128:	4314      	orrs	r4, r2
 800512a:	0c4b      	lsrs	r3, r1, #17
 800512c:	0b24      	lsrs	r4, r4, #12
 800512e:	045b      	lsls	r3, r3, #17
 8005130:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005134:	ea44 0103 	orr.w	r1, r4, r3
 8005138:	460b      	mov	r3, r1
 800513a:	492f      	ldr	r1, [pc, #188]	; (80051f8 <rint+0x100>)
 800513c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005140:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005144:	4602      	mov	r2, r0
 8005146:	4639      	mov	r1, r7
 8005148:	4630      	mov	r0, r6
 800514a:	f7fb f843 	bl	80001d4 <__adddf3>
 800514e:	e9cd 0100 	strd	r0, r1, [sp]
 8005152:	463b      	mov	r3, r7
 8005154:	4632      	mov	r2, r6
 8005156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800515a:	f7fb f839 	bl	80001d0 <__aeabi_dsub>
 800515e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005162:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005166:	4639      	mov	r1, r7
 8005168:	ec41 0b10 	vmov	d0, r0, r1
 800516c:	b003      	add	sp, #12
 800516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <rint+0x104>)
 8005172:	4132      	asrs	r2, r6
 8005174:	ea01 0702 	and.w	r7, r1, r2
 8005178:	4307      	orrs	r7, r0
 800517a:	d0f5      	beq.n	8005168 <rint+0x70>
 800517c:	0852      	lsrs	r2, r2, #1
 800517e:	4011      	ands	r1, r2
 8005180:	430c      	orrs	r4, r1
 8005182:	d00b      	beq.n	800519c <rint+0xa4>
 8005184:	ea23 0202 	bic.w	r2, r3, r2
 8005188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800518c:	2e13      	cmp	r6, #19
 800518e:	fa43 f306 	asr.w	r3, r3, r6
 8005192:	bf0c      	ite	eq
 8005194:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005198:	2400      	movne	r4, #0
 800519a:	4313      	orrs	r3, r2
 800519c:	4916      	ldr	r1, [pc, #88]	; (80051f8 <rint+0x100>)
 800519e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80051a2:	4622      	mov	r2, r4
 80051a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb f812 	bl	80001d4 <__adddf3>
 80051b0:	e9cd 0100 	strd	r0, r1, [sp]
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051bc:	f7fb f808 	bl	80001d0 <__aeabi_dsub>
 80051c0:	e7d2      	b.n	8005168 <rint+0x70>
 80051c2:	2e33      	cmp	r6, #51	; 0x33
 80051c4:	dd07      	ble.n	80051d6 <rint+0xde>
 80051c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80051ca:	d1cd      	bne.n	8005168 <rint+0x70>
 80051cc:	ee10 2a10 	vmov	r2, s0
 80051d0:	f7fb f800 	bl	80001d4 <__adddf3>
 80051d4:	e7c8      	b.n	8005168 <rint+0x70>
 80051d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	40f2      	lsrs	r2, r6
 80051e0:	4210      	tst	r0, r2
 80051e2:	d0c1      	beq.n	8005168 <rint+0x70>
 80051e4:	0852      	lsrs	r2, r2, #1
 80051e6:	4210      	tst	r0, r2
 80051e8:	bf1f      	itttt	ne
 80051ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80051ee:	ea20 0202 	bicne.w	r2, r0, r2
 80051f2:	4134      	asrne	r4, r6
 80051f4:	4314      	orrne	r4, r2
 80051f6:	e7d1      	b.n	800519c <rint+0xa4>
 80051f8:	080053b8 	.word	0x080053b8
 80051fc:	000fffff 	.word	0x000fffff

08005200 <scalbn>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	ec55 4b10 	vmov	r4, r5, d0
 8005206:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800520a:	4606      	mov	r6, r0
 800520c:	462b      	mov	r3, r5
 800520e:	b9aa      	cbnz	r2, 800523c <scalbn+0x3c>
 8005210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005214:	4323      	orrs	r3, r4
 8005216:	d03b      	beq.n	8005290 <scalbn+0x90>
 8005218:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <scalbn+0xe0>)
 800521a:	4629      	mov	r1, r5
 800521c:	2200      	movs	r2, #0
 800521e:	ee10 0a10 	vmov	r0, s0
 8005222:	f7fb f98d 	bl	8000540 <__aeabi_dmul>
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <scalbn+0xe4>)
 8005228:	429e      	cmp	r6, r3
 800522a:	4604      	mov	r4, r0
 800522c:	460d      	mov	r5, r1
 800522e:	da12      	bge.n	8005256 <scalbn+0x56>
 8005230:	a327      	add	r3, pc, #156	; (adr r3, 80052d0 <scalbn+0xd0>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f7fb f983 	bl	8000540 <__aeabi_dmul>
 800523a:	e009      	b.n	8005250 <scalbn+0x50>
 800523c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005240:	428a      	cmp	r2, r1
 8005242:	d10c      	bne.n	800525e <scalbn+0x5e>
 8005244:	ee10 2a10 	vmov	r2, s0
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fa ffc2 	bl	80001d4 <__adddf3>
 8005250:	4604      	mov	r4, r0
 8005252:	460d      	mov	r5, r1
 8005254:	e01c      	b.n	8005290 <scalbn+0x90>
 8005256:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800525a:	460b      	mov	r3, r1
 800525c:	3a36      	subs	r2, #54	; 0x36
 800525e:	4432      	add	r2, r6
 8005260:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005264:	428a      	cmp	r2, r1
 8005266:	dd0b      	ble.n	8005280 <scalbn+0x80>
 8005268:	ec45 4b11 	vmov	d1, r4, r5
 800526c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80052d8 <scalbn+0xd8>
 8005270:	f000 f83c 	bl	80052ec <copysign>
 8005274:	a318      	add	r3, pc, #96	; (adr r3, 80052d8 <scalbn+0xd8>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	ec51 0b10 	vmov	r0, r1, d0
 800527e:	e7da      	b.n	8005236 <scalbn+0x36>
 8005280:	2a00      	cmp	r2, #0
 8005282:	dd08      	ble.n	8005296 <scalbn+0x96>
 8005284:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005288:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800528c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005290:	ec45 4b10 	vmov	d0, r4, r5
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800529a:	da0d      	bge.n	80052b8 <scalbn+0xb8>
 800529c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80052a0:	429e      	cmp	r6, r3
 80052a2:	ec45 4b11 	vmov	d1, r4, r5
 80052a6:	dce1      	bgt.n	800526c <scalbn+0x6c>
 80052a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80052d0 <scalbn+0xd0>
 80052ac:	f000 f81e 	bl	80052ec <copysign>
 80052b0:	a307      	add	r3, pc, #28	; (adr r3, 80052d0 <scalbn+0xd0>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	e7e0      	b.n	800527a <scalbn+0x7a>
 80052b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80052bc:	3236      	adds	r2, #54	; 0x36
 80052be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <scalbn+0xe8>)
 80052ce:	e7b2      	b.n	8005236 <scalbn+0x36>
 80052d0:	c2f8f359 	.word	0xc2f8f359
 80052d4:	01a56e1f 	.word	0x01a56e1f
 80052d8:	8800759c 	.word	0x8800759c
 80052dc:	7e37e43c 	.word	0x7e37e43c
 80052e0:	43500000 	.word	0x43500000
 80052e4:	ffff3cb0 	.word	0xffff3cb0
 80052e8:	3c900000 	.word	0x3c900000

080052ec <copysign>:
 80052ec:	ec51 0b10 	vmov	r0, r1, d0
 80052f0:	ee11 0a90 	vmov	r0, s3
 80052f4:	ee10 2a10 	vmov	r2, s0
 80052f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80052fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005300:	ea41 0300 	orr.w	r3, r1, r0
 8005304:	ec43 2b10 	vmov	d0, r2, r3
 8005308:	4770      	bx	lr
	...

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
